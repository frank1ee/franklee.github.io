<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Frank 1ee]]></title>
  <link href="http://frank1ee.github.io/atom.xml" rel="self"/>
  <link href="http://frank1ee.github.io/"/>
  <updated>2016-02-17T11:10:09+08:00</updated>
  <id>http://frank1ee.github.io/</id>
  <author>
    <name><![CDATA[Frank Lee]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[在 Swift 中使用 API（JSON、NSData）]]></title>
    <link href="http://frank1ee.github.io/blog/2015/12/05/zai-swift-zhong-shi-yong-api(json,-nsdata)/"/>
    <updated>2015-12-05T11:17:38+08:00</updated>
    <id>http://frank1ee.github.io/blog/2015/12/05/zai-swift-zhong-shi-yong-api(json,-nsdata)</id>
    <content type="html"><![CDATA[<p>这是一篇关于在 Swift 下通过 API 获取数据的学习笔记，如有错误纰漏欢迎评论指出，感谢。</p>

<!--more-->


<h2>什么是API？</h2>

<p>记得刚开始学习iOS开发时就接触过这个字眼，遂 Google 得到以下解释：</p>

<blockquote><p>应用程序接口（英语：Application Programming Interface，简称：API），又称为应用编程接口，就是软件系统不同组成部分衔接的约定。由于近年来软件的规模日益庞大，常常需要把复杂的系统划分成小的组成部分，编程接口的设计十分重要。程序设计的实践中，编程接口的设计首先要使软件系统的职责得到合理划分。良好的接口设计可以降低系统各部分的相互依赖，提高组成单元的内聚性，降低组成单元间的耦合程度，从而提高系统的维护性和扩展性。- 摘自维基百科</p></blockquote>

<p>毫无疑问看得一知半解。简而言之，API的用途就是接入数据的通道，比如你想开发一个读书类的 App，需要图书信息资源，这时候就可以找到豆瓣提供的 API 来接入获取数据。</p>

<h2>通过平台提供的 API 获取 JSON</h2>

<p>这里拿白宫的<a href="https://petitions.whitehouse.gov/developers">请愿书</a> API 为例，通过提供的 API 请求到下方的 JSON 数据（示例）。JSON，可以理解为一种描述数据的文本格式，</p>

<p style="text-align:center;"><img src="http://frank1ee.github.io/images/petition.png" alt="alt text" /></p>

<h2>SwiftyJSON</h2>

<p><a href="https://github.com/SwiftyJSON/SwiftyJSON">SwiftyJSON</a>是一个可以让解析 JSON 数据变得异常方便的第三方库，详细内容可以点击转跳到 Github 页查看。</p>

<h2>确认状态</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="c1">//通过平台提供的 API 链接创建一个 String</span>
</span><span class='line'> <span class="k">let</span> <span class="n">urlString</span> <span class="o">=</span> <span class="s">&quot;https://api.whitehouse.gov/v1/petitions.json?limit=100&quot;</span>
</span><span class='line'><span class="c1">//创建 NSData 对象</span>
</span><span class='line'>   <span class="k">if</span> <span class="k">let</span> <span class="n">url</span> <span class="o">=</span> <span class="bp">NSURL</span><span class="p">(</span><span class="nl">string</span><span class="p">:</span> <span class="n">urlString</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="k">let</span> <span class="n">data</span> <span class="o">=</span> <span class="n">try</span><span class="o">?</span> <span class="bp">NSData</span><span class="p">(</span><span class="nl">contentsOfURL</span><span class="p">:</span> <span class="n">url</span><span class="p">,</span> <span class="nl">options</span><span class="p">:</span> <span class="p">[])</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">//导入SwiftyJSON，传入NSData 创建 JSON 对象</span>
</span><span class='line'>         <span class="k">let</span> <span class="n">json</span> <span class="o">=</span> <span class="n">JSON</span><span class="p">(</span><span class="nl">data</span><span class="p">:</span> <span class="n">data</span><span class="p">)</span>
</span><span class='line'><span class="c1">//通过 SwiftyJSON 便利地「一层层剥开」拿到数据</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">json</span><span class="p">[</span><span class="s">&quot;metadata&quot;</span><span class="p">][</span><span class="s">&quot;responseInfo&quot;</span><span class="p">][</span><span class="s">&quot;status&quot;</span><span class="p">].</span><span class="n">intValue</span> <span class="o">==</span> <span class="mi">200</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// 确认状态后就可以开始解析JSON</span>
</span><span class='line'>         <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>   <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>获取状态指的是解析 JSON 拿到"status"的值，当 status 的值为"200"时，意为「一切正常」。根据白宫请愿开发者页面所示，例如服务器异常引发的获取失败，那么 status 的值将会是"599"，从而可以让我们对不同的情况做出不同的响应。</p>

<h2>获取数据</h2>

<p>上面「确认状态」的片段其实已经涉及到了获取数据。我们可以查看平台提供的JSON返回数据实例来了解各个数据的嵌套方式和各个数据的「title」，方便我们获取数据：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s">&quot;metadata&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s">&quot;responseInfo&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="s">&quot;status&quot;</span><span class="o">:</span> <span class="mi">200</span><span class="p">,</span>
</span><span class='line'>      <span class="s">&quot;developerMessage&quot;</span><span class="o">:</span> <span class="s">&quot;OK&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s">&quot;userMessage&quot;</span><span class="o">:</span> <span class="s">&quot;&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s">&quot;errorCode&quot;</span><span class="o">:</span> <span class="s">&quot;&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s">&quot;moreInfo&quot;</span><span class="o">:</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="s">&quot;requestInfo&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="s">&quot;apiVersion&quot;</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>      <span class="s">&quot;resource&quot;</span><span class="o">:</span> <span class="s">&quot;petitions&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s">&quot;query&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="s">&quot;body&quot;</span><span class="o">:</span> <span class="n">null</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&quot;createdAfter&quot;</span><span class="o">:</span> <span class="n">null</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&quot;createdAt&quot;</span><span class="o">:</span> <span class="n">null</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&quot;createdBefore&quot;</span><span class="o">:</span> <span class="s">&quot;1352924535&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&quot;isPublic&quot;</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&quot;isSignable&quot;</span><span class="o">:</span> <span class="n">null</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&quot;limit&quot;</span><span class="o">:</span> <span class="s">&quot;3&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&quot;mock&quot;</span><span class="o">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&quot;offset&quot;</span><span class="o">:</span> <span class="s">&quot;0&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&quot;petitionsDefaultLimit&quot;</span><span class="o">:</span> <span class="mi">1000</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&quot;publicThreshold&quot;</span><span class="o">:</span> <span class="mi">149</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&quot;responseId&quot;</span><span class="o">:</span> <span class="n">null</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&quot;signatureCount&quot;</span><span class="o">:</span> <span class="n">null</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&quot;signatureCountCeiling&quot;</span><span class="o">:</span> <span class="n">null</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&quot;signatureCountFloor&quot;</span><span class="o">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&quot;signatureThreshold&quot;</span><span class="o">:</span> <span class="n">null</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&quot;signatureThresholdCeiling&quot;</span><span class="o">:</span> <span class="n">null</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&quot;signatureThresholdFloor&quot;</span><span class="o">:</span> <span class="n">null</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&quot;status&quot;</span><span class="o">:</span> <span class="n">null</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&quot;title&quot;</span><span class="o">:</span> <span class="n">null</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&quot;url&quot;</span><span class="o">:</span> <span class="n">null</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&quot;websiteUrl&quot;</span><span class="o">:</span> <span class="s">&quot;https://petitions.whitehouse.gov&quot;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="s">&quot;resultset&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="s">&quot;count&quot;</span><span class="o">:</span> <span class="mi">809</span><span class="p">,</span>
</span><span class='line'>      <span class="s">&quot;limit&quot;</span><span class="o">:</span> <span class="mi">3</span><span class="p">,</span>
</span><span class='line'>      <span class="s">&quot;offset&quot;</span><span class="o">:</span> <span class="mi">0</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="s">&quot;results&quot;</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="s">&quot;id&quot;</span><span class="o">:</span> <span class="s">&quot;226511&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s">&quot;type&quot;</span><span class="o">:</span> <span class="s">&quot;petition&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s">&quot;title&quot;</span><span class="o">:</span> <span class="s">&quot;Ban the practice of circumcising individuals under the age of 18.&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s">&quot;body&quot;</span><span class="o">:</span> <span class="s">&quot;Circumcision is a barbaric tribal practice that amounts to child abuse. Before any individual under go any permanent body modification such as tattooing or sex reassignment surgery they must be considered old enough to understand the consequences. You cannot understand the ramifications of this act to your physical being until after puberty, when your genitals have fully developed. &quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s">&quot;issues&quot;</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>          <span class="s">&quot;id&quot;</span><span class="o">:</span> <span class="mi">4</span><span class="p">,</span>
</span><span class='line'>          <span class="s">&quot;name&quot;</span><span class="o">:</span> <span class="s">&quot;Civil Rights and Liberties&quot;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>          <span class="s">&quot;id&quot;</span><span class="o">:</span> <span class="mi">25</span><span class="p">,</span>
</span><span class='line'>          <span class="s">&quot;name&quot;</span><span class="o">:</span> <span class="s">&quot;Health Care&quot;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>          <span class="s">&quot;id&quot;</span><span class="o">:</span> <span class="mi">28</span><span class="p">,</span>
</span><span class='line'>          <span class="s">&quot;name&quot;</span><span class="o">:</span> <span class="s">&quot;Human Rights&quot;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">],</span>
</span><span class='line'>      <span class="s">&quot;signatureThreshold&quot;</span><span class="o">:</span> <span class="mi">25000</span><span class="p">,</span>
</span><span class='line'>      <span class="s">&quot;signatureCount&quot;</span><span class="o">:</span> <span class="mi">3085</span><span class="p">,</span>
</span><span class='line'>      <span class="s">&quot;signaturesNeeded&quot;</span><span class="o">:</span> <span class="mi">21915</span><span class="p">,</span>
</span><span class='line'>      <span class="s">&quot;url&quot;</span><span class="o">:</span> <span class="s">&quot;https://petitions.whitehouse.gov/petition/ban-practice-circumcising-individuals-under-age-18&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s">&quot;deadline&quot;</span><span class="o">:</span> <span class="mi">1355512735</span><span class="p">,</span>
</span><span class='line'>      <span class="s">&quot;status&quot;</span><span class="o">:</span> <span class="s">&quot;closed&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s">&quot;response&quot;</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>
</span><span class='line'>   <span class="p">],</span>
</span><span class='line'>      <span class="s">&quot;created&quot;</span><span class="o">:</span> <span class="mi">1352920735</span><span class="p">,</span>
</span><span class='line'>      <span class="s">&quot;isSignable&quot;</span><span class="o">:</span> <span class="nb">false</span><span class="p">,</span>
</span><span class='line'>      <span class="s">&quot;isPublic&quot;</span><span class="o">:</span> <span class="nb">true</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="s">&quot;id&quot;</span><span class="o">:</span> <span class="s">&quot;224306&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s">&quot;type&quot;</span><span class="o">:</span> <span class="s">&quot;petition&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s">&quot;title&quot;</span><span class="o">:</span> <span class="s">&quot;Remove HEMP (Non-Psychoactive Cannabis) from the Federal governments banned substance list. Make it Legal to Grow in USA&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s">&quot;body&quot;</span><span class="o">:</span> <span class="s">&quot;There is no reason for it to be illegal. It won&#39;t make you high. It is Not Marijuana, and it alone could make enough oil to free the nation. Hemp is the most versatile plant in the Universe, its strong enough to make rope, and diverse enough to make oil. This plant will grow almost everywhere with very little maintenance and without watering.And it is insect resistant naturally. It grows quickly and the steps to turn it into gasoline are very simple. We could replace our need for anything other than hemp in a matter of Months, not years.</span><span class="se">\r\n\r\n</span><span class="s">Fuel:</span><span class="se">\r\n\r\n</span><span class="s">* Hemp can produce 10 times more methanol than corn. </span><span class="se">\r\n</span><span class="s">* Hemp is Earth&#39;s number-one biomass resource; it is capable of producing 10 tons per acre in four months.</span><span class="se">\r\n</span><span class="s">&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s">&quot;issues&quot;</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>          <span class="s">&quot;id&quot;</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>          <span class="s">&quot;name&quot;</span><span class="o">:</span> <span class="s">&quot;Agriculture&quot;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>          <span class="s">&quot;id&quot;</span><span class="o">:</span> <span class="mi">3</span><span class="p">,</span>
</span><span class='line'>          <span class="s">&quot;name&quot;</span><span class="o">:</span> <span class="s">&quot;Budget and Taxes&quot;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>          <span class="s">&quot;id&quot;</span><span class="o">:</span> <span class="mi">20</span><span class="p">,</span>
</span><span class='line'>          <span class="s">&quot;name&quot;</span><span class="o">:</span> <span class="s">&quot;Environment&quot;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">],</span>
</span><span class='line'>      <span class="s">&quot;signatureThreshold&quot;</span><span class="o">:</span> <span class="mi">25000</span><span class="p">,</span>
</span><span class='line'>      <span class="s">&quot;signatureCount&quot;</span><span class="o">:</span> <span class="mi">5091</span><span class="p">,</span>
</span><span class='line'>      <span class="s">&quot;signaturesNeeded&quot;</span><span class="o">:</span> <span class="mi">19909</span><span class="p">,</span>
</span><span class='line'>      <span class="s">&quot;url&quot;</span><span class="o">:</span> <span class="s">&quot;https://petitions.whitehouse.gov/petition/remove-hemp-non-psychoactive-cannabis-federal-governments-banned-substance-list-make-it&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s">&quot;deadline&quot;</span><span class="o">:</span> <span class="mi">1355510348</span><span class="p">,</span>
</span><span class='line'>      <span class="s">&quot;status&quot;</span><span class="o">:</span> <span class="s">&quot;closed&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s">&quot;response&quot;</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>
</span><span class='line'>   <span class="p">],</span>
</span><span class='line'>      <span class="s">&quot;created&quot;</span><span class="o">:</span> <span class="mi">1352918348</span><span class="p">,</span>
</span><span class='line'>      <span class="s">&quot;isSignable&quot;</span><span class="o">:</span> <span class="nb">false</span><span class="p">,</span>
</span><span class='line'>      <span class="s">&quot;isPublic&quot;</span><span class="o">:</span> <span class="nb">true</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="s">&quot;id&quot;</span><span class="o">:</span> <span class="s">&quot;224016&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s">&quot;type&quot;</span><span class="o">:</span> <span class="s">&quot;petition&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s">&quot;title&quot;</span><span class="o">:</span> <span class="s">&quot;Stop the US Diversity Immigrant Visa (Lottery) Program - </span><span class="se">\&quot;</span><span class="s">The USA&#39;s Open Door Welfare Program</span><span class="se">\&quot;</span><span class="s">...&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s">&quot;body&quot;</span><span class="o">:</span> <span class="s">&quot;Millions of Americans don&#39;t realize what&#39;s going on in this country.</span><span class="se">\r\n</span><span class="s">Anyone can fill out an online application form, then </span><span class="se">\&quot;</span><span class="s">WIN</span><span class="se">\&quot;</span><span class="s"> the right to come to this country and claim all the benefits. The LOTTERY makes available up to 55,000 diversity visas annually, drawn from random selection BY COMPUTER; they are just WINNING</span><span class="se">\&quot;</span><span class="s"> permanent resident status based on no qualifications!</span><span class="se">\r\n</span><span class="s">As a result, government officials are admitting millions of immigrants each year who are dependent on Medicaid, child care benefits, foster care, energy assistance, education assistance, nutritional welfare programs and other medical and health benefits.</span><span class="se">\r\n</span><span class="s">We cant afford for our government to promote a policy that encourages immigrants to apply for a green card Lottery and </span><span class="se">\&quot;</span><span class="s">WIN</span><span class="se">\&quot;</span><span class="s">- NOT DESERVE the right to become USA citizen!&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s">&quot;issues&quot;</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>          <span class="s">&quot;id&quot;</span><span class="o">:</span> <span class="mi">29</span><span class="p">,</span>
</span><span class='line'>          <span class="s">&quot;name&quot;</span><span class="o">:</span> <span class="s">&quot;Immigration&quot;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">],</span>
</span><span class='line'>      <span class="s">&quot;signatureThreshold&quot;</span><span class="o">:</span> <span class="mi">25000</span><span class="p">,</span>
</span><span class='line'>      <span class="s">&quot;signatureCount&quot;</span><span class="o">:</span> <span class="mi">2819</span><span class="p">,</span>
</span><span class='line'>      <span class="s">&quot;signaturesNeeded&quot;</span><span class="o">:</span> <span class="mi">22181</span><span class="p">,</span>
</span><span class='line'>      <span class="s">&quot;url&quot;</span><span class="o">:</span> <span class="s">&quot;https://petitions.whitehouse.gov/petition/stop-us-diversity-immigrant-visa-lottery-program-usas-open-door-welfare-program&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s">&quot;deadline&quot;</span><span class="o">:</span> <span class="mi">1355509876</span><span class="p">,</span>
</span><span class='line'>      <span class="s">&quot;status&quot;</span><span class="o">:</span> <span class="s">&quot;closed&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s">&quot;response&quot;</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>
</span><span class='line'>   <span class="p">],</span>
</span><span class='line'>      <span class="s">&quot;created&quot;</span><span class="o">:</span> <span class="mi">1352917876</span><span class="p">,</span>
</span><span class='line'>      <span class="s">&quot;isSignable&quot;</span><span class="o">:</span> <span class="nb">false</span><span class="p">,</span>
</span><span class='line'>      <span class="s">&quot;isPublic&quot;</span><span class="o">:</span> <span class="nb">true</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>刚刚我们想要"status"的数据，就通过 SwiftyJSON 的 json[&ldquo;metadata&rdquo;][&ldquo;responseInfo&rdquo;][&ldquo;status&rdquo;].intValue 「剥开」三层拿到数据的 int 值，而"result"数据与"metadata"平级，就可以这么拿到数据：json[&ldquo;result&rdquo;]。</p>

<p>根据这个 API 提供的数据，拿到请愿书的 title、body 等数据：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">for</span> <span class="n">result</span> <span class="k">in</span> <span class="n">json</span><span class="p">[</span><span class="s">&quot;results&quot;</span><span class="p">].</span><span class="n">arrayValue</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">title</span> <span class="o">=</span> <span class="n">result</span><span class="p">[</span><span class="s">&quot;title&quot;</span><span class="p">].</span><span class="n">stringValue</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">body</span> <span class="o">=</span> <span class="n">result</span><span class="p">[</span><span class="s">&quot;body&quot;</span><span class="p">].</span><span class="n">stringValue</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">sigs</span> <span class="o">=</span> <span class="n">result</span><span class="p">[</span><span class="s">&quot;signatureCount&quot;</span><span class="p">].</span><span class="n">stringValue</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">obj</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;title&quot;</span><span class="o">:</span> <span class="n">title</span><span class="p">,</span> <span class="s">&quot;body&quot;</span><span class="o">:</span> <span class="n">body</span><span class="p">,</span> <span class="s">&quot;sigs&quot;</span><span class="o">:</span> <span class="n">sigs</span><span class="p">]</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>取得"result"数据的数组值并遍历每块"result"，进一步从中取出其他数据并根据 key 保存在字典中，这样我们就实现了从平台上获取数据啦。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[日语教材《标准日本语》学习笔记]]></title>
    <link href="http://frank1ee.github.io/blog/2015/11/26/ri-yu-jiao-cai-%3C%3Cbiao-zhun-ri-ben-yu-%3E%3E-xue-xi-bi-ji/"/>
    <updated>2015-11-26T22:50:27+08:00</updated>
    <id>http://frank1ee.github.io/blog/2015/11/26/ri-yu-jiao-cai-<<biao-zhun-ri-ben-yu->>-xue-xi-bi-ji</id>
    <content type="html"><![CDATA[<p><a href="http://book.douban.com/subject/1501873/">《标准日本语》</a>，由人民教育出版社出版，这是本好教材，还有配套的 <a href="https://itunes.apple.com/cn/app/xin-ban-zhong-ri-jiao-liu/id847327884?mt=8">App</a> 可供下载。<!--more--></p>

<h1>五十音</h1>

<p>日语的入门必须经过五十音这道坎，至于什么是五十音以及怎么背五十音网上很多资源了，google 吧，我参考的是这篇知乎回答：<a href="http://zhihu.com/question/20318161/answer/53704368?utm_campaign=webshare&amp;amp;utm_source=weibo&amp;amp;utm_medium=zhihu">如何快速有效地学习日语五十音？</a></p>

<h1>常用寒暄语</h1>

<p>1.おはようございます。　早上好！</p>

<p>2.こんにちわ。　你好（白天的寒暄）</p>

<p>3.こんばんは。　晚上好</p>

<p>4.さようなら。　再见</p>

<p>5.おやすみなさい。　晚安</p>

<p>6.はじめまして。どうぞ　よろしく　お願いします。 初次见面，请多关照。</p>

<p>7.すみません。　对不起</p>

<p>8.ありがとうございます。　谢谢</p>

<p>9.いええ、どういたしまして。　不用谢</p>

<p>10.いただきます。　我吃了</p>

<p>11.ごちそうさまでした。　吃好了</p>

<h1>第一课</h1>

<h2>语法部分</h2>

<h3>1.は　です 句型</h3>

<ul>
<li>李さん<em>は</em>　中国人（ちゅうごくじん）　<em>です</em>。　小李是中国人。</li>
</ul>


<p>意为「··· 是 ···」，「は」前面的部分是主语，「です」前面的部分是谓语，助词「は」用于提示主题，读作「わ」。</p>

<h3>2.は　では　ありません　句型</h3>

<ul>
<li>森さん　<em>は</em>　学生（がくせい）　<em>では　ありません</em>。　森先生不是学生。</li>
</ul>


<p>意为「··· 不是 ···」，「では」在口语中有时会发成「じゃ」。</p>

<h3>3.疑问句及应答</h3>

<p>(1)は　ですか 句型</p>

<ul>
<li>あなた　<em>は</em>　小野さん　<em>ですか</em>。 您是小野女士吗？—— はい、小野です。　是的，我是小野。</li>
</ul>


<p>意为「··· 是 ··· 吗？」，助词「か」在句尾表示疑问，日语问句不使用问号。</p>

<p>(2)はい　　いいえ</p>

<ul>
<li><p>森さんは　学生ですか。　森先生是学生吗？</p></li>
<li><p>はい、そうです。　是，是学生。</p></li>
<li><p>いいえ、ちがいます。　不，不是。</p></li>
</ul>


<p>回答疑问句时可以直接说「はい」和 「いええ」，也可在后面加上「そうです」和「ちがいます」，不知道时回答「わかりません」。</p>

<h3>4.の</h3>

<p>-　李さんは　JC企画（ジェーシー　きかく）<em>の</em> しゃいんです。　小李是 JC 策划公司的职员。</p>

<p>意为「的」，连接名词与名词，在日语中不论名词之间是什么关系，意为「的」就用 の。</p>

<h2>表达、词语部分</h2>

<h3>1.人称</h3>

<p>(1)わたし　　あなた　　あの　人</p>

<ul>
<li><p>わたしは　李です。 我姓李。</p></li>
<li><p>あなたは　小野さんですか。　您是小野吗？</p></li>
<li><p>あの　人は　森さんですか。 那个人是森先生吗？</p></li>
</ul>


<p>「わたし」是第一人称，「あなた」是第二人称，而「あの　人」是第三人称。当不知道对方姓名而又必须打招呼的时候，才会使用「あなた」，因为这有时会显得不太礼貌。</p>

<p>(2)～さん</p>

<ul>
<li>小野さんですか。 是小野女士吗？ ——はい、小野です。</li>
</ul>


<p>称呼别人时不分男女都在其姓后加上「さん」，只用于他人的姓名后，不用于自己的姓名后。如（1）所述，一般不使用「あなた」称呼对方，而是直呼其名，有时候可以直接使用职务来称呼别人：店員さん（てんいんさん）。</p>

<p>称呼小孩时在名字后加「ちゃん」，也就是网络上常看到的「酱」。对于与自己年龄想法当或比自己年轻的男性，也可用「君（くん）」来称呼。</p>

<h3>2.省略</h3>

<p>在日语中，一般会省略通过场景或上下文可以明白的部分，比如第一、第二人称的主语：</p>

<ul>
<li>（あなたは）　吉田さんですか。——いいえ、（わたしは）吉田じゃ　ありません。（わたしは）森です。</li>
</ul>


<h3>3.会社員（かいしゃいん）　社員（しゃいん）</h3>

<p>会社員（かいしゃいん）表示一种职业，意思是公司职员，「在公司工作的人」。而社員（しゃいん）就表示职员的意思，明确某公司的职员：JC企画の　社員（しゃいん）です。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[《英语魔法师》学习笔记（续更）]]></title>
    <link href="http://frank1ee.github.io/blog/2015/11/04/%3C%3Cying-yu-mo-fa-shi-%3E%3E-xue-xi-bi-ji/"/>
    <updated>2015-11-04T20:57:47+08:00</updated>
    <id>http://frank1ee.github.io/blog/2015/11/04/<<ying-yu-mo-fa-shi->>-xue-xi-bi-ji</id>
    <content type="html"><![CDATA[<p><a href="http://book.douban.com/subject/1014914/">《英语魔法师之语法俱乐部》</a>是<a href="http://baike.baidu.com/link?url=YY6Nzko9s81VbOEUt958j4NU8MDjlvpQiMO5jTNCUozsFoOj7gJufHDC6W4d6Kpk-N0SZh25VJR1z5bUCIeZga">旋元佑</a>老师完成的英语语法书，在豆瓣评分高达9.5，可以说是颇具口碑的一本语法书。作者三番五次地在书中埋汰市面上多数语法书有很多似通非通的「规则」，规则解释不了就叫「例外」，而作者主张好的语法观念多注重理解，无需去背各种各样的规则和例外。该书分为三篇：简单句、复句与合句、简化从句，先从基本简单句型切入，再到将简单句合成成为复合句型，最后到精简复合句的简化从句，层层递进。<!--more--></p>

<p>这是目前为止唯一一本我没有中途放弃的语法书，相比于其他语法书，《英语魔法师》确实相对更容易理解和学习。这本书我已看过两遍（第一遍快速翻阅，第二遍做了书面笔记），但是对于语法和这本语法书还是掌握得非常粗浅，这次看这本书尝试将读书笔记发表在博客上，不同于以往的将笔记完成后再发表，而是每章节一更新。章节学习过后不着急进入下一章节，多观察句型实践知识点，尽量完全理解过后再进入下一章节，同时邀您与我一起学习，在评论中留下反馈，一起探讨语法问题。enjoy！</p>

<h1>第一篇 初级句型-简单句（Simple Sentences）</h1>

<p><br /></p>

<h2>基本句型、连缀动词、S+V+C</h2>

<ul>
<li><p>五种单句的基本类型：S+V，S+V+O，S+V+C，S+V+O+O，S+V+O+C（S：主语、V：动词、O：宾语、C：补语），宾语是指及物动词的接受方，及物动词指的是有些动作需要发生在另一个对象的身上，比如 kill，需要有一个「被杀」的接受方；而补语的作用是为意思不完整的动词补足句意，按照作者的说法是：有些动词解释为「是」，完全没有意义，例如：John Smith was a soldier. was 这个动词无法完成叙述全句最主要内容的工作，所以需要 a soldier 这个补语来补足句意。</p></li>
<li><p>be动词 算是最直观的解释为「是」的动词，没有叙述能力，只能把主语和后面构成叙述的部分连接起来，所以它又被称为「连缀动词（Linking Verb）」。</p></li>
<li><p>以下这些动词都被作者认定为「连缀动词」：look（看起来是）、seem（似乎是）、appear（显得是）、sound（听起来是）、feel（摸起来是）、taste（尝起来是）、turn（转变为）、prove（证实为）、become（成为）、make（做为），「为」和「是」意思相同，一个主语配合以上这些动词都无法构成一个有意义的完整句子，看看下面的例子：</p>

<pre><code>  That dress looks pretty.(那件裙子很好看。)
  The dog seems friendly.(那只狗好像很友善。)
  He became a teacher.(他当了老师。)    
</code></pre>

<p>将以上例句的动词替换成 be动词，句意都不会太大的偏差，这就证明了上面这些动词都能解释为各式各样的「是」，这就是 S+V+C 句型。</p></li>
</ul>


<h2>宾语补语、补语的词类、S+V+O+O</h2>

<ul>
<li><p>宾语补语，即 S+V+O+C 句型。参考上面的 S+V+C 句型的补语目的是补足句意，告诉读者主语是什么，而宾语补语则是通过补语告诉读者宾语是什么：</p>

<pre><code>  I find the dress pretty.(我觉得这衣服很漂亮。)
  They consider his demands reasonable.（他们认为他的要求是合理的。）
  Most people consider a nurse a good wift.（大多数的人认为护士会是称职的太太。）
</code></pre>

<p>宾语和补语之间有一种「是」的暗示存在。如例句1，在宾语和补语之间加上一个 be动词 ，就相当于 「The dress is pretty.」的 S+V+C 句型，也就是宾语和补语是同等或修饰的关系，这是与 S+V+O+O 句型相区分的一个检验方式。</p></li>
<li><p>补语的词类为名词和形容词比较合理。名词补语通过动词「是」连接来表达与主语或宾语的同等关系：「John Smith was a soldier.」，形容词补语通过动词「是」连接来修饰主语或宾语：「John Smith was courageous.」。</p></li>
<li><p>be动词 通常作为连缀动词使用，但它还有一个不同的用法：解释为「存在」，用在最单纯的 S+V 句型中。这里引用了《哈姆雷特》中的经典独白：「To be or not to be，that is the question.」，这里的 be动词 解释为「存在」。</p></li>
<li><p>双宾语句型，即 S+V+O+O。有这样一种动词：它需要有一个动作的接受者和一个动作的附带物，比如 「John&rsquo;s father gave him a dog.」，动词 gave 需要把狗（附带物）给 him（接受者），这两个皆为名词却不是同等关系。而 S+V+O+C 是同等关系：「John&rsquo;s father called him a dog.」。宾宾和宾补都可以皆为名词，需要注意区分，区别就是「是否为等同关系」。</p></li>
</ul>


<h2>名词短语、冠词、专有名词</h2>

<ul>
<li><p>简单地说，名词短语就是由限定词、形容词、名词共同组成的，例如：a new book.名词短语是英语句子中不可或缺的元素，可以出现在主语、宾语、补语、介系词后接的宾语等位置。下面几个例子：</p>

<pre><code>  many good students 许多好学生
  his beautiful wife 他美丽的妻子
  the best answer 最好的答案
</code></pre></li>
</ul>


<p>第一部分（many、his、the）就是限定词，限定词用来表示名词的范围。第二部分是形容词，修饰名词。</p>

<ul>
<li><p>事实上，名词短语中三个部分每个都可以省略，例如：the best（拿掉 book，也是正确的名词短语，eg.Of this answers,this one is the best.)。his wift（拿掉形容词 beautiful）也是正确的。</p></li>
<li><p>冠词（a/an，the）是限定词的一种，从语源学（etymology）的角度看，不定冠词（a/an）其实就是 one 的弱化形式，如果名词短语的名词部分不适合以「一个」来交代的话，那么就可以把限定词的位置空下来，例如：</p>

<pre><code>  Unmarried men are a rare species these days.
  （未婚男性目前是稀有品种了。）
</code></pre></li>
</ul>


<p>名词短语中没有限定词，因为 men 已经清楚表示名词是复数，这就不需要再加限定词了。如果是 a new book，book 是单数形态，因此需要限定词来配合标示。当然还有抽象名词（honesty、bribery）和物质名词（water、food）这些抽象不可数的名词也可以省略限定词。</p>

<ul>
<li><p>专有名词，如人名、地名，代表的对象只有一个，不适合加 a/an ，因此也不必在前加限定词。例如：a Barack Obama，这里就是（一个奥巴马）的意思，这就暗示了还有第二个奥巴马存在，就算世界上有人重名，但很明显这里指的就是唯一的美国总统奥巴马，因此可以省略限定词。</p></li>
<li><p>然而有时候专有名词还需要判断，例如像 Sunday，在一月中会有四个 Sunday，而一星期中只有一个，两种不同的情况导致其可能是专有名词也有可能不是：</p>

<pre><code>  There are five Sundays this month.(非专有名词)
  I have an appointment on Sunday.（专有名词）
</code></pre></li>
<li><p>放在补语位置的专有名词最难判断，要判断补语是否为专有名词有两个条件：1、因为补语与主语（宾语）有同等的关系，那么如果补语补足的主语（宾语）是专有名词的话，补语便也可以视为专有名词。2、主语（宾语）是专有名词还不够，还得根据句意看这个补语位置的词是否也具备「唯一」的特质。满足这两点就可以不加限定词啦，下面看例子：</p>

<pre><code>  Mr.Elson was president of the high school.
</code></pre></li>
</ul>


<p>本句中 Mr.Elson 是人名，即专有名词，则可以不加限定词。president 本是一个普通名词，并且不只有这所高中才有校长，这所高中的校长历来也不只他一个人，但是这所学校的那个时刻他就是这个学校唯一的校长，所以也可以视其为专有名词。</p>

<pre><code>    Some say he was a better president than Mr.Robert.
</code></pre>

<p>本句中拿两位校长作比较，不具备「唯一」的特质，所以 better president 这个名词短语还需要一个限定词。</p>

<pre><code>    Mr.Elson is also a member of the Council of the city.
</code></pre>

<p>本句中 a member of the Council 是 Mr.Elson 的补语，但是 市政会委员可以有很多人，他只是其中之一，交代他是「其中之一」就需要加上不定冠词 a。</p>

<p>当同位语是补语时，也要注意是否为专有名词：</p>

<pre><code>    Mattin Wales,head of the football team,at the time,wore a mustache.
</code></pre>

<p>&ldquo;Head of the football team"被称为同位语，其实就是"who was Head of football team&hellip;"这个形容词从句（后文会深入）的省略，who 就是代表 人名作主语，Head 则是补语，与主语同等关系而且队伍的队长只有一个，所以是专有名词。</p>

<p>宾语补语也是一样的：</p>

<pre><code>    Clinton made Gorle campaign partner of the Presidential election.
</code></pre>

<p>句中的 campaign partner 是宾语 Gorle 的补语，Gorle 是人名，并且副总统搭档只有一个人，具备「唯一」特质，所以视为专有名词。</p>

<ul>
<li><p>定冠词 the，同样根据语源学可将其视为 that 或 those 的弱化形式，而 that 和 those 带有指示性，所以句中如有明指或暗示的指示，那么名词短语就需要加上定冠词 the，看例子：</p>

<pre><code>  I need a book to read on my trip.
  (泛指 any book 中之一)
  I have finished the book you lent me.
  (指示出「你借我的那本」)


  He should be home,I saw a light in his house.
  (家中灯的任何一个)
  Turn off the portal light.
  （指出关掉门口的那个灯）
</code></pre></li>
</ul>


<p>有时可能会有暗示的指示性，还需根据句意判断：</p>

<pre><code>    I'm going to the office now.
    （暗示的就是自己的那间办公室）

    Do you mind if I open the window? 
    （如有人在公车上这么问你，暗示的就是你边上的那扇窗）
</code></pre>

<ul>
<li><p>专有名词的定义就是只有一个对象存在的名词，而定冠词 the 有「这个」、「那个」的指示性，这东西就有两个以上，所以当看似是专有名词（如人名、地名）使用定冠词 the 时，证明这就不是专有名词了：</p>

<pre><code>  This is not the John Smith I know.
  （可能不是同一人，也可能是他不为我所知的另一面，
  所以相当于是两个人的对比，这里就不是专有名词了）

  This is a photography show of the Taibei 50 years ago.
  (the 指示出 50 年前的台北，和现在的不同，有俩台北，所以这个词就
  不是专有名词了)
</code></pre></li>
<li><p>一般语法书列出海洋、河流、群岛、群山、杂志名、船名等，称它们是「专有名词需要加定冠词」，是例外。作者的说法是：</p>

<pre><code>  the Pacific (Ocean)    太平洋
  the Atlantic （Ocean）  大西洋
  the Mediterranean （Sea） 地中海
  the Dead Sea
</code></pre></li>
</ul>


<p>像 Pacific 这类名称是放在名词短语的形容词位置，Ocean、Sea 是省略掉了，那么大洋、海、都不止一个，这里指出「叫做 Pacific 的那个洋」，完全没有问题。而想 the Dead Sea、the Indian Ocean、the Philippines Islands 这类就不能省略掉名词位置，因为会造成误解：the Dead、the Indian。</p>

<p>同理还有：</p>

<pre><code>    the Titanic （ship）  
    the Hilton （Hotel）
    the United States
    the United Nations
</code></pre>

<p>其实名词位置都是普通名词：ship、Hotel、States、Nations，所以加定冠词没有任何问题。</p>

<ul>
<li>以上就是作者对于名词短语、冠词用法的看法，这里做个总结：</li>
</ul>


<p>名词短语包括三个部分：限定词，形容词，名词，任一部分都允许被省略。
限定词用来界定名词范围，冠词是限定词的一种，又分为定冠词（the）、不定冠词（a/an）。
如果名词不适合用 a/an，也就是不可数的话，那么就不需要限定词，比如 water、history。
专有名词不需要限定词，但还需进一步判断到底是不是专有名词，方法参考上面内容。</p>

<p>为了便于理解，附上「维基百科」中对 冠词 的定义：</p>

<blockquote><p>定冠词（例如英语中的the）用来限定这个冠词后面的名词是讲话者明确指出的某个特定的事物；
不定冠词（例如英语中的a/an）用来表示这个冠词后面的名词是指某一类特定事物中的一个，但具体是哪一个并不重要；</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我在听的那些 Podcast]]></title>
    <link href="http://frank1ee.github.io/blog/2015/10/27/wo-zai-ting-de-na-xie-podcast/"/>
    <updated>2015-10-27T16:06:18+08:00</updated>
    <id>http://frank1ee.github.io/blog/2015/10/27/wo-zai-ting-de-na-xie-podcast</id>
    <content type="html"><![CDATA[<p>相信不少人和我一样，第一次接触 podcast（播客）这个概念是在 iOS 系统中，其自带了一个「播客」应用，可以找到自己感兴趣的节目在线或是下载播放收听。真正开始坚持收听播客是因为英语学习的需求找到 <a href="https://www.eslpod.com/website/">ESL Podcast</a>  这个节目，而后又相继订阅了几个，可以说播客现在已经是我日常生活中的一部分（通常在洗衣服或乘坐交通工具时收听）。<!--more--></p>

<h1>OverCast</h1>

<p style="text-align:center;"><img src="http://frank1ee.github.io/images/mypodcast/Overcast.png" alt="alt text" /></p>

<p><a href="https://overcast.fm/">Overcast</a> 是由独立开发者 <a href="https://twitter.com/marcoarment">Marco Arment</a> 开发的一款播客客户端，精简易用，拥有不少实用的功能，例如 Smart Speed 和 Voice Boost，可以简单理解为智能缩短播客内容间歇和声音均衡器。</p>

<p style="text-align:center;"><img src="http://frank1ee.github.io/images/mypodcast/OvercastDis.png" alt="alt text" /></p>

<p>Overcast 之前一直是免费+内购的模式，为了更「有效率」地听播客，我也购买内购解锁了全部功能。然而在我购买不久后，作者发布了 Overcast 2.0 并将所有功能免费，同时在其博客发表了<a href="http://www.marco.org/2015/10/09/overcast2">文章</a>说明了他的「Crazy new business model」，大意是仅有20%的用户购买了完整版，而有80%的用户使用的是一个不完整的产品，无法使用那些作者自认为很棒的功能，所以他选择将 Overcast 完全免费，用户可以自行捐助支持。Overcast 2.0 现已支持流化播放（在线播放）和 3D touch，同时优化了已有功能，如果你想坚持听播客，Overcast 会是一个很好的选择。-><a href="https://itunes.apple.com/us/app/overcast-podcast-player/id888422857?mt=8">点这里跳转到 App Store</a></p>

<h1>我订阅的播客</h1>

<h2>ESL Podcast</h2>

<p style="text-align:center;"><img src="http://frank1ee.github.io/images/mypodcast/Eslpod.png" alt="alt text" /></p>

<p><a href="https://www.eslpod.com/website/index.php">ESL Podcast</a>（English as a Second Language Podcast），由一个有着超过30年「英语作为第二语言」教学经验的团队运营，由 Dr. Lucy Tse 写稿，Dr. Jeff McQuillan 主播。他们相信对于一个ESLer（英语作为第二语言的学习者），听一段能大致理解的对话材料是最快提升英语水平的方法。英语听力材料数不胜收，但很多英语学习者只能听懂40%-50%，这等于浪费了大半时间。ESL Podcast 则会以常速和慢速朗读对话，多使用日常的词组和表达方式，碰到比较「难」的单词时会通过简单的词汇讲解清楚。</p>

<h2>狗熊有话说</h2>

<p style="text-align:center;"><img src="http://frank1ee.github.io/images/mypodcast/Beartalk.png" alt="alt text" /></p>

<p><a href="http://www.beartalking.com/">狗熊有话说</a>，是由<a href="http://weibo.com/bearbig">大狗熊</a>主播的「独立知识型生活科技类播客」，聚焦设计、思考与生活，以阅读、旅行、科技和个人成长为主要话题内容。这是我订阅的第一档中文播客节目，有意思的是我是先在微博上关注了大狗熊，缘起于他做的一款名为「微享+」的 app，浏览他的微博主页后，凭借好奇心开始听他的节目，几乎一期不落地听他分享他的故事、经历和思考。「狗熊有话说」带给我不少新视角和思考，也是因为他，我下决心开始录电台节目&hellip;</p>

<h2>This American Life</h2>

<p style="text-align:center;"><img src="http://frank1ee.github.io/images/mypodcast/Thisamericanlife.png" alt="alt text" /></p>

<p><a href="http://www.thisamericanlife.org/">This American Life</a>，始于1995年的播客节目，每期节目会定下一个主题，讲述几个与主题相关的故事，有些故事甚至能改变你看待事物的方式。由于自己的英语水平有限，很多听不懂&hellip;有几次在车上听着听着就睡着了。Anyway，这是个好节目，感兴趣的可以听听看。</p>

<h2>IT 公论</h2>

<p style="text-align:center;"><img src="http://frank1ee.github.io/images/mypodcast/Itgonglun.png" alt="alt text" /></p>

<p><a href="https://ipn.li/itgonglun/">IT 公论</a>，是由 IPN 出品，<a href="https://twitter.com/itgonglun">不鸟万如一</a> 和 <a href="http://weibo.com/riobard?noscale_head=1#_0">Rio</a> 主持的一档中文科技节目。这也是我每期必听的节目，内容主要聚焦于近期科技行业的新鲜事儿和两位主播对于科技产品的看法，有时也会邀请到嘉宾聊聊「外面的环境」。两位主播的声音都很好听，逻辑和表达都很清晰，每期的「听众反馈环节」也是一大亮点。</p>

<h2>蛋解创业</h2>

<p style="text-align:center;"><img src="http://frank1ee.github.io/images/mypodcast/Danjiechuangye.png" alt="alt text" /></p>

<p><a href="http://weibo.com/danjiechuangye">蛋解创业</a>，第一次订阅这个节目是因为 <a href="http://weibo.com/u/1764177832?topnav=1&amp;wvr=6&amp;topsug=1">Robert</a> 在朋友圈中的推荐，记得当时听的那期不是一个常规节目，背景音乐放着音量有些大的「老男孩」，顿觉节目音频质量差就取消订阅没再收听。前两天「狗熊有话说」的主播到访蛋解创业，听完节目觉得「蛋解创业」的两位主播挺逗比挺有意思，于是又订阅了。。因为刚订阅没几天，我仅听过最新一期（邀请到「为知笔记」的创始人聊创业经历），所以不好评论这个节目，总之它与创业相关。</p>

<h2>Learn Japanese</h2>

<p style="text-align:center;"><img src="http://frank1ee.github.io/images/mypodcast/Japanese.png" alt="alt text" /></p>

<p><a href="http://www.japanesepod101.com/">Learn Japanese</a> 是由 japanesepod101 出品的播客节目，最近开始学习日语，所以找到这个节目。主播以英日文讲解，内容多元：词汇、词组、日本文化、商务日语、新闻等等。现阶段于我来说节目的日文内容大多听不懂，不做过多评论，引用一段外媒的评价：</p>

<blockquote><p>“JapanesePod101.com” is quite simply one of the best podcast series out there for learning Japanese. It has a superlative library of material for the beginner, intermediate and advanced language learner. In addition to the audio lessons, there are plenty of video tutorials too. The presentation is clear and crisp throughout, with ample opportunity for the student to repeat what they’ve just heard.</p></blockquote>

<p><br /></p>

<p>本文的目的仅仅是推荐自己已订阅的播客，对于节目的评论多源于自己的理解，如有偏差纯属无意为之，还请各位自己收听节目产生判断。如果你愿意推荐一些你正在听的播客，欢迎在本文下方留下评论。</p>

<p>Android 用户想尝试播客却不知道使用哪一款 App 的可以参考这篇文章：<a href="http://www.theverge.com/2015/6/4/8725311/best-podcast-app-android-pocket-casts-doggcatcher-stitcher">The best podcast app for Android</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[记九寨成都行（上）]]></title>
    <link href="http://frank1ee.github.io/blog/2015/10/13/ji-jiu-zhai-cheng-du-xing/"/>
    <updated>2015-10-13T16:50:31+08:00</updated>
    <id>http://frank1ee.github.io/blog/2015/10/13/ji-jiu-zhai-cheng-du-xing</id>
    <content type="html"><![CDATA[<p>此次出行共计5天，10月5日出发飞成都，当天飞往九寨黄龙机场并入住酒店，10月7日晚到达成都，10月9日回到厦门。</p>

<p style="text-align:center;"><img src="http://frank1ee.github.io/images/jiuzhaichengdu/%E5%8F%8C%E6%B5%81%E6%9C%BA%E5%9C%BA.png" alt="alt text" /></p>

<!--more-->


<p>第一站，成都双流机场。其拥有两条长3600米的平行跑道，是中西部最繁忙的交通枢纽。在此解决晚餐，经过45分钟的飞行于19:55到达九寨黄龙机场，当时的气温应该在是8℃上下，海拔3200米，快步走能感觉到轻微的高反（呼吸略微急促）。紧接着乘大巴到达酒店，休息。</p>

<h2>九寨沟</h2>

<p>九寨沟景区位于四川省北部，属四川省阿坝藏族羌族自治州九寨沟县，因其湖光水色美到极致，故有「世界水王」之称。</p>

<p style="text-align:center;"><img src="http://frank1ee.github.io/images/jiuzhaichengdu/map.png" alt="alt text" /></p>

<p>九寨沟分为树正沟、日则沟、则查洼沟，呈现一个「丫」字，右沟(日则沟)的景点是比较出彩的。全额套票:门票220+车票90+保险10=320元，6-18岁的本科及以下学生和60-70岁老人可以享受门票半价的优惠，车票指的是景区内的公交车服务，仅需在停车点等候上车前往不同的景点线路，人多的话需要排队。</p>

<p><br /></p>

<p style="text-align:center;"><img src="http://frank1ee.github.io/images/jiuzhaichengdu/%E8%AF%BA%E6%97%A5%E6%9C%97%E7%80%91%E5%B8%83.png" alt="alt text" /></p>

<p>第一个景点，诺日朗瀑布，瀑布宽270米，是中国最宽的瀑布。很遗憾当时没有找对角度拍出它的雄伟宽阔，应该尝试在道路边的观景台上以一个相对远的位置拍下瀑布全景。</p>

<p><br /></p>

<p style="text-align:center;"><img src="http://frank1ee.github.io/images/jiuzhaichengdu/%E9%95%BF%E6%B5%B7.png" alt="alt text" /></p>

<p>接着直奔左沟最顶端也是九寨沟海拔最高（3060米）的景点，长海。湖面静谧幽蓝，山色渐黄，云雾缭绕，应该是九寨沟湖面最宽的海子。</p>

<p><br /></p>

<p style="text-align:center;"><img src="http://frank1ee.github.io/images/jiuzhaichengdu/%E7%BA%A2%E6%A1%A6%E6%A0%91.png" alt="alt text" /></p>

<p>长海往下前往五彩池，图上是九寨沟随处可见的红桦树，传说红桦树的树皮上面可以写字，写上去的字迹经久不褪，用红桦树皮写情书送给情人就会心想事成。</p>

<p><br /></p>

<p style="text-align:center;"><img src="http://frank1ee.github.io/images/jiuzhaichengdu/%E4%BA%94%E5%BD%A9%E6%B1%A0.png" alt="alt text" /></p>

<p>五彩池，这应该是九寨沟内色彩饱和度最高的池子了，绿得称奇。由于湖里生长着不同的水生植物，在富含碳酸钙的湖水里呈现出不同的颜色，故被称为「五彩池」。</p>

<p><br /></p>

<p>因为入沟时间晚，仅游览三个景点就已接近正午时分，午餐在三沟交汇点「诺日朗服务中心」解决，自助餐的形式，价格三档分别是60元，98元，138元，餐厅门口也有盒饭供应。吃完饭过后开始游览日则沟。</p>

<p><br /></p>

<p style="text-align:center;"><img src="http://frank1ee.github.io/images/jiuzhaichengdu/%E4%BA%94%E8%8A%B1%E6%B5%B7.png" alt="alt text" /></p>

<p style="text-align:center;"><img src="http://frank1ee.github.io/images/jiuzhaichengdu/%E4%BA%94%E8%8A%B1%E6%B5%B72.png" alt="alt text" /></p>

<p>五花海，被称为「九寨精华」，湖面宽阔大气，湖水碧绿幽深，清澈见底，正值光线充足更显艳丽通透。</p>

<p><br /></p>

<p style="text-align:center;"><img src="http://frank1ee.github.io/images/jiuzhaichengdu/%E7%86%8A%E7%8C%AB%E6%B5%B7.png" alt="alt text" /></p>

<p style="text-align:center;"><img src="http://frank1ee.github.io/images/jiuzhaichengdu/%E7%86%8A%E7%8C%AB%E6%B5%B72.png" alt="alt text" /></p>

<p>熊猫海，湖中不少小鱼群，据说是因为熊猫喜欢在此出没，因而得此名。</p>

<p><br /></p>

<p style="text-align:center;"><img src="http://frank1ee.github.io/images/jiuzhaichengdu/%E6%BA%AA%E6%B6%A7.png" alt="alt text" /></p>

<p>充满生机的溪涧贯穿整个九寨沟。</p>

<p><br /></p>

<p style="text-align:center;"><img src="http://frank1ee.github.io/images/jiuzhaichengdu/%E5%8E%9F%E5%A7%8B%E6%A3%AE%E6%9E%97.png" alt="alt text" /></p>

<p>到达日则沟的最顶端，原始森林（<em>Old-growth forest，又称原生林，是指一个森林已经达到非常长久的年龄而没有遭到显著的干扰，从而表现出独特的生态特征，并可能被归类为顶极群落。- 摘自维基百科</em>），我们没有进入原始森林，仅仅在入口处窥视「地球之肺」，大吸几口含氧量爆表的空气。</p>

<p><br /></p>

<p style="text-align:center;"><img src="http://frank1ee.github.io/images/jiuzhaichengdu/%E7%8F%8D%E7%8F%A0%E6%BB%A9%E7%80%91%E5%B8%83.png" alt="alt text" /></p>

<p style="text-align:center;"><img src="http://frank1ee.github.io/images/jiuzhaichengdu/%E7%8F%8D%E7%8F%A0%E6%BB%A9%E7%80%91%E5%B8%832.png" alt="alt text" /></p>

<p>珍珠滩瀑布，最大落差可达40米，由珍珠滩喧腾而下，气势非凡。沿着瀑布侧面的木梯往涧底走，感受瀑布在身边奔腾，十分壮观。该瀑布也是电视剧《西游记》片头曲的取景地。</p>

<p><br /></p>

<p style="text-align:center;"><img src="http://frank1ee.github.io/images/jiuzhaichengdu/%E7%8A%80%E7%89%9B%E6%B5%B7.png" alt="alt text" /></p>

<p>犀牛海，此行我最喜欢的景点，传说古时候，有一位身患重病、奄奄一息的藏族老喇嘛，骑着犀牛来到这里。当他饮用了这里的湖水后，病症竟然奇迹似的康复了。于是老喇嘛日夜饮这里的湖水，舍不得离开，最后便骑着犀牛进入海中，永久定居于此，这个海子便称为犀牛海。早上乘车经过犀牛海，平静如一面镜子般倒映着环山，下午遗憾有微风无法记录下「那面镜子」，但此「美如画」般的画面还是让我驻足惊叹。</p>

<p><br /></p>

<p style="text-align:center;"><img src="http://frank1ee.github.io/images/jiuzhaichengdu/%E8%80%81%E8%99%8E%E6%B5%B7.png" alt="alt text" /></p>

<p>老虎海，据说是因为其下游的树正瀑布水生如雷，宛若虎啸，因而得名。</p>

<p><br /></p>

<p style="text-align:center;"><img src="http://frank1ee.github.io/images/jiuzhaichengdu/%E6%A0%91%E6%AD%A3%E7%80%91%E5%B8%83.png" alt="alt text" /></p>

<p>树正瀑布，这是九寨沟四大瀑布中最小的一个，慢门下的瀑布如白色绸缎一般。</p>

<p><br /></p>

<p style="text-align:center;"><img src="http://frank1ee.github.io/images/jiuzhaichengdu/%E6%A0%91%E6%AD%A3%E5%AF%A8.png" alt="alt text" /></p>

<p style="text-align:center;"><img src="http://frank1ee.github.io/images/jiuzhaichengdu/%E6%A0%91%E6%AD%A3%E5%AF%A82.png" alt="alt text" /></p>

<p>树正寨，九寨沟九个藏族村寨中最大、最繁华的一个，九寨沟1000人中就有400多人居住于此。寨口的九个白塔被称为九宝莲花菩提塔，其中最大的一个代表树正寨。</p>

<p><br /></p>

<p>至此，九寨沟景区游览结束，经这一天走下来，海子的景色渐渐不再像初见那么令人惊奇，但仍然会驻足感叹大自然的神奇美妙。因为时间有限还有不少景点没看，不过比较出彩的部分算都一一饱了眼福。</p>

<p><br /></p>

<p style="text-align:center;"><img src="http://frank1ee.github.io/images/jiuzhaichengdu/%E5%B7%9D%E4%B8%BB%E5%AF%BA%E9%95%87.png" alt="alt text" /></p>

<p>位于松潘县的川主寺镇，是通往九寨沟和黄龙景区的必经之地。</p>

<p><br /></p>

<p style="text-align:center;"><img src="http://frank1ee.github.io/images/jiuzhaichengdu/%E4%B9%9D%E5%AF%A8%E9%BB%84%E9%BE%99%E6%9C%BA%E5%9C%BA.png" alt="alt text" /></p>

<p>九寨黄龙机场，10月7日下午到达九寨黄龙机场，天气骤变甚至降下了点冰渣子，登上对面的山丘拍下这张照片，于20：45离开九寨。</p>

<p style="text-align:center;"><img src="http://frank1ee.github.io/images/jiuzhaichengdu/feiji.png" alt="alt text" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hacking With Swift 学习笔记]]></title>
    <link href="http://frank1ee.github.io/blog/2015/09/13/hacking-with-swift-xue-xi-bi-ji/"/>
    <updated>2015-09-13T17:06:01+08:00</updated>
    <id>http://frank1ee.github.io/blog/2015/09/13/hacking-with-swift-xue-xi-bi-ji</id>
    <content type="html"><![CDATA[<p><a href="https://www.hackingwithswift.com/">Hacking with Swift</a> 是由 <a href="https://twitter.com/twostraws">Paul Hudson</a> 发布的 免费 Swift 教程，其涵盖了30个项目，并且包含了 Swift 2.0。因为该教程是面向初学者，所以很多知识点都没有深入探讨，如果想要深入学习可以参考官方文档：<a href="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/index.html#//apple_ref/doc/uid/TP40014097-CH3-ID0">The Swift Programming Language (Swift 2.1)</a><!--more--></p>

<h1>Introducing to Swift</h1>

<ul>
<li>Playground 是自 Xcode6 起苹果加入的实时浏览代码结果的一个功能。</li>
</ul>


<p><br /></p>

<ul>
<li>变量通过 var 声明，常量通过 let 声明。
Swift 可以推断变量的类型(type reference)，所以声明变量可以直接如下：</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">var</span> <span class="n">string</span> <span class="o">=</span> <span class="err">“</span><span class="n">My</span> <span class="n">string</span><span class="err">”</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//也可以先声明类型（必须）或声明与赋值同时：</span>
</span><span class='line'>
</span><span class='line'><span class="k">var</span> <span class="nl">string</span><span class="p">:</span><span class="n">String</span> <span class="o">=</span> <span class="err">“</span><span class="n">My</span> <span class="n">string</span><span class="err">”</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>苹果官方建议在声明有小数部分的变量时都采用 Double，因其具有更高的精准度。</li>
</ul>


<p><br /></p>

<ul>
<li>Swift 中 bool 值是 true 和 false。</li>
</ul>


<p><br /></p>

<ul>
<li>“+” 号也可用于 string :</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">var</span> <span class="n">name1</span> <span class="o">=</span> <span class="s">&quot;Tim McGraw&quot;</span>
</span><span class='line'><span class="k">var</span> <span class="n">name2</span> <span class="o">=</span> <span class="s">&quot;Romeo&quot;</span>
</span><span class='line'><span class="k">var</span> <span class="n">both</span> <span class="o">=</span> <span class="n">name1</span> <span class="o">+</span> <span class="s">&quot; and &quot;</span> <span class="o">+</span> <span class="n">name2</span> <span class="c1">//&quot;Tim McGraw and Romeo&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>字符串的对比运算是”case-sensitive”，也就是区分大小写：</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">var</span> <span class="n">name</span> <span class="o">=</span> <span class="err">“</span><span class="n">TIM</span> <span class="n">MCGRAW</span><span class="s">&quot; </span>
</span><span class='line'><span class="k">var</span> <span class="n">name2</span> <span class="o">=</span>  <span class="s">&quot;TiM mCgRaW&quot;</span>
</span><span class='line'><span class="n">name</span> <span class="o">==</span> <span class="n">name2</span>  <span class="c1">//result is false</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>在 string 中插入变量：</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">var</span> <span class="n">name</span> <span class="o">=</span> <span class="err">“</span><span class="n">Tim</span> <span class="n">McGraw</span><span class="err">”</span>
</span><span class='line'><span class="err">“</span><span class="n">Your</span> <span class="n">name</span> <span class="kt">is</span> <span class="err">\</span><span class="p">(</span><span class="n">name</span><span class="p">)</span><span class="err">”</span>
</span><span class='line'><span class="c1">//可以在括号中运算：</span>
</span><span class='line'><span class="k">var</span> <span class="n">age</span> <span class="o">=</span> <span class="mi">25</span>
</span><span class='line'><span class="err">“</span><span class="n">His</span> <span class="n">age</span> <span class="kt">is</span> <span class="err">\</span><span class="p">(</span><span class="n">age</span> <span class="o">*</span> <span class="mi">2</span><span class="p">)</span><span class="err">”</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Arrays,Dictionaries,Loops,Switch case</h2>

<ul>
<li>通过类型注释（Type annotaions）可以申明数组内容的类型：</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">var</span> <span class="nl">songs</span><span class="p">:</span> <span class="p">[</span><span class="n">String</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;Shake it Off&quot;</span><span class="p">,</span> <span class="s">&quot;You Belong with Me&quot;</span><span class="p">,</span> <span class="s">&quot;Back to December&quot;</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
</span><span class='line'><span class="c1">//以上会报错，因为数组内有非 String 类型的”3”在内。</span>
</span></code></pre></td></tr></table></div></figure>


<p><br /></p>

<ul>
<li>以下代码仅仅是声明了一个将要被分配包含String对象数组的变量：</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">var</span> <span class="nl">array</span><span class="p">:[</span><span class="n">String</span><span class="p">]</span>
</span><span class='line'><span class="c1">//没有真正创建数组对象</span>
</span><span class='line'>
</span><span class='line'><span class="k">var</span> <span class="nl">array</span><span class="p">:</span> <span class="p">[</span><span class="n">String</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'><span class="c1">//这时才是创建了数组对象</span>
</span><span class='line'>
</span><span class='line'><span class="k">var</span> <span class="n">array</span> <span class="o">=</span> <span class="p">[</span><span class="n">String</span><span class="p">]</span> <span class="p">()</span>
</span><span class='line'><span class="c1">//效果同上，语法更为简洁。</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>数组可以直接使用”+”运算符结合：</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">var</span> <span class="n">songs</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;Shake it Off&quot;</span><span class="p">,</span> <span class="s">&quot;You Belong with Me&quot;</span><span class="p">,</span> <span class="s">&quot;Love Story&quot;</span><span class="p">]</span>
</span><span class='line'><span class="k">var</span> <span class="n">songs2</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;Today was a Fairytale&quot;</span><span class="p">,</span> <span class="s">&quot;White Horse&quot;</span><span class="p">,</span> <span class="s">&quot;Fifteen&quot;</span><span class="p">]</span>
</span><span class='line'><span class="k">var</span> <span class="n">both</span> <span class="o">=</span> <span class="n">songs</span> <span class="o">+</span> <span class="n">songs2</span>
</span><span class='line'>
</span><span class='line'><span class="n">both</span> <span class="o">+=</span> <span class="p">[</span><span class="err">“</span><span class="n">Everything</span><span class="err">”</span><span class="p">]</span>
</span><span class='line'><span class="c1">//可以增加并赋值</span>
</span></code></pre></td></tr></table></div></figure>


<p><br /></p>

<ul>
<li>创建一个 Disctionary：</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">var</span> <span class="n">person</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>      <span class="s">&quot;first&quot;</span><span class="o">:</span> <span class="s">&quot;Taylor&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s">&quot;middle&quot;</span><span class="o">:</span> <span class="s">&quot;Alison&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s">&quot;last&quot;</span><span class="o">:</span> <span class="s">&quot;Swift&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s">&quot;month&quot;</span><span class="o">:</span> <span class="s">&quot;December&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s">&quot;website&quot;</span><span class="o">:</span> <span class="s">&quot;taylorswift.com&quot;</span>
</span><span class='line'>            <span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Swift 中，条件表达式不需要括号：</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'>    <span class="k">if</span> <span class="n">person</span> <span class="o">==</span> <span class="s">&quot;hater&quot;</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">action</span> <span class="o">=</span> <span class="s">&quot;hate&quot;</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="n">person</span> <span class="o">==</span> <span class="s">&quot;player&quot;</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">action</span> <span class="o">=</span> <span class="s">&quot;play&quot;</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">action</span> <span class="o">=</span> <span class="s">&quot;cruise&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>在 Swift 2.0中，println() 改为 print()</code></li>
</ul>


<p><br /></p>

<ul>
<li>Swift 的 for 循环语法：</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="c1">// closed range operator</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mf">1.</span><span class="p">.</span><span class="mf">.10</span><span class="p">{</span>
</span><span class='line'>  <span class="n">println</span><span class="p">(</span><span class="s">&quot;\(i) x 10 is \(i * 10)&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">以上结果相当于：</span>
</span><span class='line'><span class="cm">println(&quot;1 x 10 is \(1 * 10)&quot;)</span>
</span><span class='line'><span class="cm">println(&quot;2 x 10 is \(2 * 10)&quot;)</span>
</span><span class='line'><span class="cm">println(&quot;3 x 10 is \(3 * 10)&quot;)</span>
</span><span class='line'><span class="cm">println(&quot;4 x 10 is \(4 * 10)&quot;)</span>
</span><span class='line'><span class="cm">println(&quot;5 x 10 is \(5 * 10)&quot;)</span>
</span><span class='line'><span class="cm">println(&quot;6 x 10 is \(6 * 10)&quot;)</span>
</span><span class='line'><span class="cm">println(&quot;7 x 10 is \(7 * 10)&quot;)</span>
</span><span class='line'><span class="cm">println(&quot;8 x 10 is \(8 * 10)&quot;)</span>
</span><span class='line'><span class="cm">println(&quot;9 x 10 is \(9 * 10)&quot;)</span>
</span><span class='line'><span class="cm">println(&quot;10 x 10 is \(10 * 10)&quot;)</span>
</span><span class='line'><span class="cm">*/</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>不需要「循环数」时也可以用下划线代替：</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">for</span> <span class="n">_</span> <span class="k">in</span> <span class="mi">1</span> <span class="p">...</span> <span class="mi">5</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">str</span> <span class="o">+=</span> <span class="s">&quot; fake&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>half open range operator(半开区间运算符):&ldquo;..&lt;"，例如 ..&lt;5 将会循环四次，count 将会是 1,2,3,4。&rdquo;..&lt;&ldquo; 可以方便于遍历数组（数组的 index 从0算起）：</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">0</span> <span class="p">..</span><span class="o">&lt;</span> <span class="n">count</span><span class="p">(</span><span class="n">people</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="s">&quot;\(people[i]) gonna \(actions[i])&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>遍历数组的语法：</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="p">...</span>
</span><span class='line'>      
</span><span class='line'><span class="k">for</span> <span class="n">song</span> <span class="k">in</span> <span class="n">songs</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="s">&quot;My favorite song is \(song)&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">//通过 index 同时遍历俩数组：</span>
</span><span class='line'><span class="k">var</span> <span class="n">people</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;players&quot;</span><span class="p">,</span> <span class="s">&quot;haters&quot;</span><span class="p">,</span> <span class="s">&quot;heart-breakers&quot;</span><span class="p">,</span> <span class="s">&quot;fakers&quot;</span><span class="p">]</span>
</span><span class='line'><span class="k">var</span> <span class="n">actions</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;play&quot;</span><span class="p">,</span> <span class="s">&quot;hate&quot;</span><span class="p">,</span> <span class="s">&quot;break&quot;</span><span class="p">,</span> <span class="s">&quot;fake&quot;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">0</span> <span class="p">...</span> <span class="mi">3</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="s">&quot;\(people[i]) gonna \(actions[i])&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><br /></p>

<ul>
<li><code>获取数组内的对象数量的方法在 Swift 1.2中是 count(array)，在 Swift 2.0中是 array.count。</code></li>
</ul>


<p><br /></p>

<ul>
<li>loop 中的 continue 语法 将会终止当前的迭代回到 loop 的开头继续迭代。</li>
</ul>


<p><br /></p>

<ul>
<li>switch/case 语法可以简化较多的 if/else if 语法，Swift 要求 switch 条件变量所有可能的情况都得涵盖（
cases should exhustive），否则 Xcode 可能无法构建应用，default 可以避免该问题。</li>
</ul>


<p><br /></p>

<ul>
<li>可以在 switch/case 中使用 &ldquo;&hellip;&rdquo;(half open range operator) 将变量可能的范围作为一个 case：</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="n">studioAlbums</span> <span class="o">=</span> <span class="mi">5</span>
</span><span class='line'>  <span class="k">switch</span> <span class="n">studioAlbums</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="mf">0.</span><span class="p">.</span><span class="mf">.1</span><span class="o">:</span>
</span><span class='line'>          <span class="n">println</span><span class="p">(</span><span class="s">&quot;You&#39;re just starting out&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="k">case</span> <span class="mf">2.</span><span class="p">.</span><span class="mf">.3</span><span class="o">:</span>
</span><span class='line'>          <span class="n">println</span><span class="p">(</span><span class="s">&quot;You&#39;re a rising star&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="k">case</span> <span class="mf">4.</span><span class="p">.</span><span class="mf">.5</span><span class="o">:</span>
</span><span class='line'>          <span class="n">println</span><span class="p">(</span><span class="s">&quot;You&#39;re world famous!&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="k">default</span><span class="o">:</span>
</span><span class='line'>          <span class="n">println</span><span class="p">(</span><span class="s">&quot;Have you done something new?&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>Swift 2.0 方法调用和1.2稍有不同，需要写明参数名，目的是提高代码可读性：</code></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="nf">printAlbumRelease</span><span class="p">(</span><span class="nl">name</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="nl">year</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="s">&quot;\(name) was released in \(year)&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">printAlbumRelease</span><span class="p">(</span><span class="s">&quot;Fearless&quot;</span><span class="p">,</span> <span class="nl">year</span><span class="p">:</span> <span class="mi">2008</span><span class="p">)</span>
</span><span class='line'><span class="n">printAlbumRelease</span><span class="p">(</span><span class="s">&quot;Speak Now&quot;</span><span class="p">,</span> <span class="nl">year</span><span class="p">:</span> <span class="mi">2010</span><span class="p">)</span>
</span><span class='line'><span class="n">printAlbumRelease</span><span class="p">(</span><span class="s">&quot;Red&quot;</span><span class="p">,</span> <span class="nl">year</span><span class="p">:</span> <span class="mi">2012</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>&ldquo;->"符号为方法声明返回值：</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="n">albumsIsTaylor</span><span class="p">(</span><span class="nl">name</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Bool</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Optionals</h2>

<p><br />
Apple 在 Swift 中为其加入了 Optional，Optional 是一种类型，可以有值，也可以等于 nil（也就是没有值）。在 oc 中，只有指向对象的指针可以为 nil，而在 swift 中基本类型创建后没有初始值，而是为 nil，并且无法使用。</p>

<p>开发中遇到的一些意想不到的问题，例如程序崩溃、影响UI,最常见的原因就是因为使用了为 nil 的值，Optional 这一特性确保了代码安全性。</p>

<ul>
<li>定义一个 Optional 的值只需在类型后添加一个问号“?”：</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">var</span> <span class="nl">str</span><span class="p">:</span> <span class="n">String</span><span class="o">?</span> <span class="c1">//输出nil</span>
</span><span class='line'>      
</span><span class='line'><span class="c1">//以上是一个名为 str 的 Optional String.</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Optional 类型无法直接使用，需要拆包(unwrap)后取出原类型的值后使用。在 Optional 类型后加上感叹号(!)进行显式拆包（Force unwrapping optionals）：</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">var</span> <span class="nl">str</span><span class="p">:</span> <span class="n">String</span><span class="o">?</span> <span class="o">=</span> <span class="s">&quot;Hallo World&quot;</span>
</span><span class='line'>      
</span><span class='line'><span class="n">str</span>  <span class="c1">//nil</span>
</span><span class='line'><span class="n">str</span><span class="o">!</span>  <span class="c1">//&quot;Hallo World&quot;</span>
</span><span class='line'>      
</span><span class='line'><span class="n">print</span><span class="p">(</span><span class="n">str</span><span class="p">)</span> <span class="c1">//输出&quot;Optional(&quot;Hallo World&quot;)&quot;</span>
</span><span class='line'><span class="n">print</span><span class="p">(</span><span class="n">str</span><span class="o">!</span><span class="p">)</span> <span class="c1">//输出&quot;Hallo World&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>通过 if let 语句可以判断 Optional 是否有值，如果有，将其拆包赋值给一个本地变量：</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="nf">getHaterStatus</span><span class="p">(</span><span class="nl">weather</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">String</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">weather</span> <span class="o">==</span> <span class="s">&quot;sunny&quot;</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">nil</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&quot;Hate&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="c1">//该方法返回一个 Optional String 类型</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">func</span> <span class="n">takeHaterAction</span><span class="p">(</span><span class="nl">status</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">status</span> <span class="o">==</span> <span class="s">&quot;Hate&quot;</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">print</span><span class="p">(</span><span class="s">&quot;Hating&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="c1">//该方法需要传入一个 String 类型</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="k">let</span> <span class="n">status</span> <span class="o">=</span> <span class="n">getHaterStatus</span><span class="p">(</span><span class="s">&quot;rainy&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">takeHaterAction</span><span class="p">(</span><span class="n">status</span><span class="p">)</span>
</span><span class='line'>          
</span><span class='line'><span class="cm">/* if let 语句将调用了 getHaterStatus 方法后得到的 Optional 值拆包后赋值给本地变量 status，确保 takeHaterAction 方法传入的是一个有值的参数。 */</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><br /></p>

<ul>
<li>Optional 还提供了隐式拆包（implicitly unwrapped optionals），隐式拆包的 Optional 在使用前无需拆包。要使用隐式拆包需要在变量声明时的数据类型后加上感叹号(!)：</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">var</span> <span class="nl">str</span><span class="p">:</span> <span class="n">String</span><span class="o">!</span> <span class="o">=</span> <span class="s">&quot;Hello World!&quot;</span>
</span><span class='line'><span class="n">str</span> <span class="c1">//Hello World!</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用隐式拆包需要小心，要确保变量已被正确初始化。一般会在以下情况遇到 Implicitly unwrapped：</p>

<ol>
<li>当使用 Apple 的 API 时会经常碰到隐式拆包的返回值。</li>
<li>当使用 UIKit 的用户界面元素时。</li>
</ol>


<h3>总结一下 Optional：</h3>

<p><br /></p>

<ul>
<li><p>一个普通类型的变量必须有值，比如一个 String 变量需要拥有一个 string，哪怕是空的字符串（"&ldquo;)。</p></li>
<li><p>一个 Optional 类型的变量可以有值也可以无值（也就是为nil），但在使用前必须将其拆包(Unwrap)。</p></li>
<li><p>一个隐式拆包的 Optional 类型变量可以有值也可以无值，使用前不需要拆包，因此 Swift 也不会为你检查，需要格外小心。</p></li>
</ul>


<p><br /></p>

<hr />

<p><br /></p>

<ul>
<li>Optional Chaining：
在 Objective-C 中，对 nil 发送消息会得到 nil，但是在 Swift 中不允许这么做。当对一个 Optional 类型的对象发送消息时，通过 Optional Chaining 可以对其判断是否有值，如果是则发送消息，反之则什么也不做：</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="n">albumReleasedYear</span><span class="p">(</span><span class="nl">year</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">String</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">switch</span> <span class="n">year</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="mi">2006</span><span class="o">:</span> <span class="k">return</span> <span class="s">&quot;Taylor Swift&quot;</span>
</span><span class='line'>    <span class="k">case</span> <span class="mi">2008</span><span class="o">:</span> <span class="k">return</span> <span class="s">&quot;Fearless&quot;</span>
</span><span class='line'>    <span class="k">case</span> <span class="mi">2010</span><span class="o">:</span> <span class="k">return</span> <span class="s">&quot;Speak Now&quot;</span>
</span><span class='line'>    <span class="k">case</span> <span class="mi">2012</span><span class="o">:</span> <span class="k">return</span> <span class="s">&quot;Red&quot;</span>
</span><span class='line'>    <span class="k">case</span> <span class="mi">2014</span><span class="o">:</span> <span class="k">return</span> <span class="s">&quot;1989&quot;</span>
</span><span class='line'>    <span class="k">default</span><span class="o">:</span> <span class="k">return</span> <span class="nb">nil</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">album</span> <span class="o">=</span> <span class="n">albumReleasedYear</span><span class="p">(</span><span class="mi">2006</span><span class="p">)</span><span class="o">?</span><span class="p">.</span><span class="n">uppercaseString</span> <span class="c1">//输出 Optional(&quot;TAYLOR SWFIT&quot;)</span>
</span><span class='line'><span class="c1">//即问号(?)前有值才发送消息，这就是 Optional Chaining</span>
</span><span class='line'>
</span><span class='line'><span class="n">Optional</span> <span class="n">Chaining</span> <span class="err">如同其名可以像链条一样连接，多长都可以，</span><span class="n">Swift</span> <span class="err">会从左至右检查直至发现</span> <span class="nb">nil</span> <span class="err">即终止：</span>
</span><span class='line'>      
</span><span class='line'><span class="k">let</span> <span class="n">album</span> <span class="o">=</span> <span class="n">albumReleasedYear</span><span class="p">(</span><span class="mi">2006</span><span class="p">)</span><span class="o">?</span><span class="p">.</span><span class="n">someOptionalValue</span><span class="o">?</span><span class="p">.</span><span class="n">someOtherOptionalValue</span><span class="o">?</span><span class="p">.</span><span class="n">whatever</span>
</span></code></pre></td></tr></table></div></figure>


<p><br /></p>

<ul>
<li>The nil coalescing operator：
Swift 的这个特性可以让你的代码更加简单和安全。例如：当 Value A 有值时则使用 Value A，如果 Value A 无值，则使用 Value B，这对 Optional 十分有用：</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="n">album</span> <span class="o">=</span> <span class="n">albumReleasedYear</span><span class="p">(</span><span class="mi">2006</span><span class="p">)</span> <span class="o">??</span> <span class="s">&quot;unknown&quot;</span>
</span><span class='line'><span class="n">print</span><span class="p">(</span><span class="s">&quot;The album is \(album)&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1">//如果 albumReleasedYear(2006)返回的 Optional 无值，则使用非 Optional &quot;unknown&quot;.</span>
</span></code></pre></td></tr></table></div></figure>


<p><br /></p>

<h2>Enumeration</h2>

<p><br />
- 枚举（Enum）可以将一系列相关的值定义为一个组类型，通过如下语法创建 enum：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">enum</span> <span class="n">WeatherType</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="n">Sun</span><span class="p">,</span> <span class="n">Cloud</span><span class="p">,</span> <span class="n">Rain</span><span class="p">,</span> <span class="n">Wind</span><span class="p">,</span> <span class="n">Snow</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>下面看看如何使用枚举类型：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="n">getHaterStatus</span><span class="p">(</span><span class="nl">weather</span><span class="p">:</span> <span class="n">WeatherType</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">String</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">weather</span> <span class="o">==</span> <span class="n">WeatherType</span><span class="p">.</span><span class="n">Sun</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">nil</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&quot;Hate&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">getHaterStatus</span><span class="p">(</span><span class="n">WeatherType</span><span class="p">.</span><span class="n">Cloud</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>也可以这么定义枚举：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">enum</span> <span class="n">WeatherType</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">Sun</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">Cloud</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">Rain</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">Wind</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">Snow</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>也可以这么使用枚举：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="n">getHaterStatus</span><span class="p">(</span><span class="nl">weather</span><span class="p">:</span> <span class="n">WeatherType</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">String</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">weather</span> <span class="o">==</span> <span class="p">.</span><span class="n">Sun</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">nil</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&quot;Hate&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>  <span class="c1">//Swift 通过 Type inference 知道你与 WeatherType 类型比较，所以无需写明枚举类型，但是这种写法 Swift 将不会提供代码补足建议辅助</span>
</span><span class='line'>
</span><span class='line'><span class="n">getHaterStatus</span><span class="p">(.</span><span class="n">Cloud</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><br /></p>

<p>枚举在 switch/case 中十分有用，因为 Swfit 知道你的枚举类型中都都有什么值，所以能确保你涵盖了所有的 case：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="n">getHaterStatus</span><span class="p">(</span><span class="nl">weather</span><span class="p">:</span> <span class="n">WeatherType</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">String</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">switch</span> <span class="n">weather</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="p">.</span><span class="nl">Sun</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">nil</span>
</span><span class='line'>    <span class="k">case</span> <span class="p">.</span><span class="n">Cloud</span><span class="p">,</span> <span class="p">.</span><span class="nl">Wind</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&quot;dislike&quot;</span>
</span><span class='line'>    <span class="k">case</span> <span class="p">.</span><span class="nl">Rain</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&quot;hate&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="c1">//这段代码不会成功编译，应该添加 case .Snow 或是 default case。</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>对于 Enum，Swift 还有一个非常强大的特性：可以为组中的值再附加一个值，进一步细分：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">enum</span> <span class="n">WeatherType</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">Sun</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">Cloud</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">Rain</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">Wind</span><span class="p">(</span><span class="nl">speed</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">Snow</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如此，使用 switch/case 时就有了额外的条件，当条件都满足时 case 才会匹配：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="n">getHaterStatus</span><span class="p">(</span><span class="nl">weather</span><span class="p">:</span> <span class="n">WeatherType</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">String</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">switch</span> <span class="n">weather</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="p">.</span><span class="nl">Sun</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">nil</span>
</span><span class='line'>    <span class="k">case</span> <span class="p">.</span><span class="n">Wind</span><span class="p">(</span><span class="k">let</span> <span class="n">speed</span><span class="p">)</span> <span class="k">where</span> <span class="n">speed</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="o">:</span> <span class="c1">//meh</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&quot;meh&quot;</span>
</span><span class='line'>    <span class="k">case</span> <span class="p">.</span><span class="n">Cloud</span><span class="p">,</span> <span class="p">.</span><span class="nl">Wind</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&quot;dislike&quot;</span>
</span><span class='line'>    <span class="k">case</span> <span class="p">.</span><span class="n">Rain</span><span class="p">,</span> <span class="p">.</span><span class="nl">Snow</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&quot;hate&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">getHaterStatus</span><span class="p">(</span><span class="n">WeatherType</span><span class="p">.</span><span class="n">Wind</span><span class="p">(</span><span class="nl">speed</span><span class="p">:</span> <span class="mi">5</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>代码段第五行的 let 关键字的用途是声明一个能引用的常量名保存传入的参数，通过 Where 关键字来声明条件。</p>

<p>Swift 从上至下判断 switch/case 语句，所以请注意 case 的排序。</p>

<h2>Structs</h2>

<p>Structs（结构体） 是一种复杂数据类型，包含了多个值，通过 struct 关键字定义一个结构体：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">struct</span> <span class="n">Person</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">clothes</span><span class="p">:</span> <span class="n">String</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">shoes</span><span class="p">:</span> <span class="n">String</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Swift 让你非常简单地创建一个结构体变量，只需要将初始值传入即可：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="n">taylor</span> <span class="o">=</span> <span class="n">Person</span><span class="p">(</span><span class="nl">clothes</span><span class="p">:</span> <span class="s">&quot;T-shirt&quot;</span><span class="p">,</span> <span class="nl">shoes</span><span class="p">:</span> <span class="s">&quot;sneakers&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">let</span> <span class="n">other</span> <span class="o">=</span> <span class="n">Person</span><span class="p">(</span><span class="nl">clothes</span><span class="p">:</span> <span class="s">&quot;short skirts, shoes: &quot;</span><span class="n">high</span> <span class="n">heels</span><span class="s">&quot;)</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过结构体变量名以及属性名来访问属性的值：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">print</span><span class="p">(</span><span class="n">taylor</span><span class="p">.</span><span class="n">clothes</span><span class="p">)</span>
</span><span class='line'><span class="n">print</span><span class="p">(</span><span class="n">other</span><span class="p">.</span><span class="n">shoes</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Swift 有一个名为"copy on write"的机制，当你将一个结构体变量赋给另一个变量时，会独立拷贝一份：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">struct</span> <span class="n">Person</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">clothes</span><span class="p">:</span> <span class="n">String</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">shoes</span><span class="p">:</span> <span class="n">String</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">taylor</span> <span class="o">=</span> <span class="n">Person</span><span class="p">(</span><span class="nl">clothes</span><span class="p">:</span> <span class="s">&quot;T-shirts&quot;</span><span class="p">,</span> <span class="nl">shoes</span><span class="p">:</span> <span class="s">&quot;sneakers&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">let</span> <span class="n">other</span> <span class="o">=</span> <span class="n">Person</span><span class="p">(</span><span class="nl">clothes</span><span class="p">:</span> <span class="s">&quot;short skirts&quot;</span><span class="p">,</span> <span class="nl">shoes</span><span class="p">:</span> <span class="s">&quot;high heels&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">var</span> <span class="n">taylorCopy</span> <span class="o">=</span> <span class="n">taylor</span>
</span><span class='line'><span class="n">taylorCopy</span><span class="p">.</span><span class="n">shoes</span> <span class="o">=</span> <span class="s">&quot;flip flops&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">taylor</span>       <span class="c1">//(clothes: &quot;short skirts&quot;, shoes: &quot;high heels&quot;)</span>
</span><span class='line'><span class="n">taylorCopy</span>   <span class="c1">//(clothes: &quot;short skirts&quot;, shoes: &quot;flip flops&quot;)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Classes</h2>

<p>通过 class 关键字定义一个类：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">class</span> <span class="n">Person</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">clothes</span><span class="p">:</span> <span class="n">String</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">shoes</span><span class="p">:</span> <span class="n">String</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是上面有个问题，Swift 不允许创建未被正确初始化的变量。解决方法有三种：</p>

<ol>
<li>将这两个变量定义为 Optional。（这会致使代码中出现大量不必要的 Optional 类型）</li>
<li>给变量附上一个初始值。（这行得通，但这有点浪费，除非这个初始值一定会被使用）</li>
<li>自己写一个初始化方法。（最佳）</li>
</ol>


<p>通过创建一个 init() 方法来实现自定义初始化方法：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">class</span> <span class="n">Person</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">clothes</span><span class="p">:</span> <span class="n">String</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">shoes</span><span class="p">:</span> <span class="n">String</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">init</span><span class="p">(</span><span class="nl">clothes</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="nl">shoes</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">clothes</span> <span class="o">=</span> <span class="n">clothes</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">shoes</span> <span class="o">=</span> <span class="n">shoes</span>
</span><span class='line'>        <span class="c1">//init方法不需要添加 func 关键字</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>实例化一个类：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">var</span> <span class="n">taylor</span> <span class="o">=</span> <span class="n">Person</span><span class="p">(</span><span class="nl">name</span><span class="p">:</span> <span class="s">&quot;Taylor&quot;</span><span class="p">,</span> <span class="nl">age</span><span class="p">:</span> <span class="mi">25</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>继承一个类：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">class</span> <span class="nl">Singer</span><span class="p">:</span> <span class="n">Person</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在 Swift 中，想要在继承类（子类）中覆盖父类的方法，需要使用 override 关键字：</p>

<p>class Singer: Person {
    override func sing() {
        print(&ldquo;Trucks, girls, and liquor&rdquo;)
    }
}</p>

<p>通过 super 关键字调用父类方法：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'>    <span class="k">init</span><span class="p">(</span><span class="nl">name</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="nl">age</span><span class="p">:</span> <span class="n">Int</span><span class="p">,</span> <span class="nl">noiseLevel</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">noiseLevel</span> <span class="o">=</span> <span class="n">noiseLevel</span>
</span><span class='line'>        <span class="nb">super</span><span class="p">.</span><span class="k">init</span><span class="p">(</span><span class="nl">name</span><span class="p">:</span> <span class="n">name</span><span class="p">,</span> <span class="nl">age</span><span class="p">:</span> <span class="n">age</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>在 Swift 中，类和结构体有点相似，都可以拥有属性和方法，区别在于结构体是值拷贝，这意味着改变拷贝值不会改变原来的值，而类是指针拷贝，拷贝的变量会指向相同的实例，见下例：</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="c1">// Value type example</span>
</span><span class='line'><span class="k">struct</span> <span class="n">S</span> <span class="p">{</span> <span class="k">var</span> <span class="nl">data</span><span class="p">:</span> <span class="n">Int</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span> <span class="p">}</span>
</span><span class='line'><span class="k">var</span> <span class="n">a</span> <span class="o">=</span> <span class="n">S</span><span class="p">()</span>
</span><span class='line'><span class="k">var</span> <span class="n">b</span> <span class="o">=</span> <span class="n">a</span>                        <span class="c1">// a is copied to b</span>
</span><span class='line'><span class="n">a</span><span class="p">.</span><span class="n">data</span> <span class="o">=</span> <span class="mi">42</span>                        <span class="c1">// Changes a, not b</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="s">&quot;\(a.data), \(b.data)&quot;</span><span class="p">)</span>    <span class="c1">// prints &quot;42, -1&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Reference type example</span>
</span><span class='line'><span class="k">class</span> <span class="n">C</span> <span class="p">{</span> <span class="k">var</span> <span class="nl">data</span><span class="p">:</span> <span class="n">Int</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span> <span class="p">}</span>
</span><span class='line'><span class="k">var</span> <span class="n">x</span> <span class="o">=</span> <span class="n">C</span><span class="p">()</span>
</span><span class='line'><span class="k">var</span> <span class="n">y</span> <span class="o">=</span> <span class="n">x</span>                        <span class="c1">// x is copied to y</span>
</span><span class='line'><span class="n">x</span><span class="p">.</span><span class="n">data</span> <span class="o">=</span> <span class="mi">42</span>                        <span class="c1">// changes the instance referred to by x (and y)</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="s">&quot;\(x.data), \(y.data)&quot;</span><span class="p">)</span>    <span class="c1">// prints &quot;42, 42&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Properties</h2>

<p>结构体和类（统称为 types）可以拥有自己的变量和常量（统称为 properties）。types 也可拥有方法来处理 properties：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">struct</span> <span class="n">Person</span> <span class="p">{</span>
</span><span class='line'>   <span class="k">var</span> <span class="nl">clothes</span><span class="p">:</span> <span class="n">String</span>
</span><span class='line'>   <span class="k">var</span> <span class="nl">shoes</span><span class="p">:</span> <span class="n">String</span>
</span><span class='line'>  
</span><span class='line'>   <span class="k">func</span> <span class="n">describe</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">print</span><span class="p">(</span><span class="s">&quot;I like wearing \(clothes) with \(shoes)&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">taylor</span> <span class="o">=</span> <span class="n">Person</span><span class="p">(</span><span class="nl">clothes</span><span class="p">:</span> <span class="s">&quot;T-shirts&quot;</span><span class="p">,</span> <span class="nl">shoes</span><span class="p">:</span> <span class="s">&quot;sneakers&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">let</span> <span class="n">other</span> <span class="o">=</span> <span class="n">Person</span><span class="p">(</span><span class="nl">clothes</span><span class="p">:</span> <span class="s">&quot;short skirts&quot;</span><span class="p">,</span> <span class="nl">shoes</span><span class="p">:</span> <span class="s">&quot;high heels&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">taylor</span><span class="p">.</span><span class="n">describe</span><span class="p">()</span> <span class="c1">//&quot;I like wearing T-shirts with sneakers&quot;</span>
</span><span class='line'><span class="n">other</span><span class="p">.</span><span class="n">describe</span><span class="p">()</span> <span class="c1">//&quot;I like wearing short skirts with high heels&quot;</span>
</span><span class='line'><span class="c1">//调用方法时，不同的对象使用相应的值</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Property observers</h3>

<p>Swift 提供了两个观察者方法，willSet 和 didSet，分别会在属性的值将要改变以及改变后触发（常用于用户界面的更新）：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">struct</span> <span class="n">Person</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">clothes</span><span class="p">:</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>        <span class="kr">willSet</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">updateUI</span><span class="p">(</span><span class="s">&quot;I&#39;m changing from \(clothes) to \(newValue)&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="kr">didSet</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">updateUI</span><span class="p">(</span><span class="s">&quot;I just changed from \(oldValue) to \(clothes)&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">func</span> <span class="n">updateUI</span><span class="p">(</span><span class="nl">msg</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="n">msg</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">var</span> <span class="n">taylor</span> <span class="o">=</span> <span class="n">Person</span><span class="p">(</span><span class="nl">clothes</span><span class="p">:</span> <span class="s">&quot;T-shirts&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">taylor</span><span class="p">.</span><span class="n">clothes</span> <span class="o">=</span> <span class="s">&quot;short skirts&quot;</span> <span class="c1">//值改变，将会调用观察者方法</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Computed properties</h3>

<p>Computed properties 其实就是自己重写属性的 get/set 方法：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">struct</span> <span class="n">Person</span> <span class="p">{</span>
</span><span class='line'>   <span class="k">var</span> <span class="nl">age</span><span class="p">:</span> <span class="n">Int</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">var</span> <span class="nl">ageInDogYears</span><span class="p">:</span> <span class="n">Int</span> <span class="p">{</span>
</span><span class='line'>        <span class="kr">get</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">age</span> <span class="o">*</span> <span class="mi">7</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">var</span> <span class="n">fan</span> <span class="o">=</span> <span class="n">Person</span><span class="p">(</span><span class="nl">age</span><span class="p">:</span> <span class="mi">25</span><span class="p">)</span>
</span><span class='line'><span class="n">print</span><span class="p">(</span><span class="n">fan</span><span class="p">.</span><span class="n">ageInDogYears</span><span class="p">)</span> <span class="c1">//输出：25 * 7</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Static properties and methods</h3>

<p>静态属性和方法属于 type（class\struct），而不属于类的实例，这可以更好的组织一个共享的储存数据。通过 static 关键字声明一个静态变量：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">struct</span> <span class="n">TaylorFan</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">static</span> <span class="k">var</span> <span class="n">favoriteSong</span> <span class="o">=</span> <span class="s">&quot;Shake it Off&quot;</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">var</span> <span class="nl">name</span><span class="p">:</span> <span class="n">String</span>
</span><span class='line'>   <span class="k">var</span> <span class="nl">age</span><span class="p">:</span> <span class="n">Int</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">fan</span> <span class="o">=</span> <span class="n">TaylorFan</span><span class="p">(</span><span class="nl">name</span><span class="p">:</span> <span class="s">&quot;James&quot;</span><span class="p">,</span> <span class="nl">age</span><span class="p">:</span> <span class="mi">25</span><span class="p">)</span>
</span><span class='line'><span class="n">print</span><span class="p">(</span><span class="n">TaylorFan</span><span class="p">.</span><span class="n">favoriteSong</span><span class="p">)</span>
</span><span class='line'><span class="c1">//每个 TaylorFan 类型的对象都会有自己的名字和年龄，但他们都有共同喜欢的歌曲：&quot;Shake it Off&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p><br /></p>

<p>因为静态属性和方法存在于 类 中，所以静态方法是无法访问非静态属性的。</p>

<h2>Access control</h2>

<p>在 Xcode beta4 中 Swift 增加了这个特性，Access control 让你明确在结构体、类中的数据该怎么面向外界，有以下三种关键字：</p>

<ul>
<li>Public：所有人都可以读写属性。</li>
<li>Internal：这是默认访问级别，模块中的 swift 代码都可以访问。</li>
<li>Private：只有当前Swift源文件可以访问。</li>
</ul>


<p>大多数时候你不必明确访问级别，但有些时候你会需要将一个属性设为<code>private</code>，使其无法被其他人直接访问。
这样声明一个 private 的属性：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">class</span> <span class="n">TaylorFan</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">private</span> <span class="k">var</span> <span class="nl">name</span><span class="p">:</span> <span class="n">String</span><span class="o">!</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意：Playground 不受 Access control 的限制，因为它可以无碍地访问文件因此它可以读写任何数据。</p>

<h2>Polymorphism and type casting</h2>

<p>Polymorphism 译为多态，指的是在类的继承中，子类会继承父类的属性、方法，多态即指子类可以拥有父类或自身定义的两种行为，你可以为其选择：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">class</span> <span class="n">Album</span> <span class="p">{</span>
</span><span class='line'>   <span class="k">var</span> <span class="nl">name</span><span class="p">:</span> <span class="n">String</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">init</span><span class="p">(</span><span class="nl">name</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nl">StudioAlbum</span><span class="p">:</span> <span class="n">Album</span> <span class="p">{</span>
</span><span class='line'>   <span class="k">var</span> <span class="nl">studio</span><span class="p">:</span> <span class="n">String</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">init</span><span class="p">(</span><span class="nl">name</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="nl">studio</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">studio</span> <span class="o">=</span> <span class="n">studio</span>
</span><span class='line'>        <span class="nb">super</span><span class="p">.</span><span class="k">init</span><span class="p">(</span><span class="nl">name</span><span class="p">:</span> <span class="n">name</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nl">LiveAlbum</span><span class="p">:</span> <span class="n">Album</span> <span class="p">{</span>
</span><span class='line'>   <span class="k">var</span> <span class="nl">location</span><span class="p">:</span> <span class="n">String</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">init</span><span class="p">(</span><span class="nl">name</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="nl">location</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">location</span> <span class="o">=</span> <span class="n">location</span>
</span><span class='line'>        <span class="nb">super</span><span class="p">.</span><span class="k">init</span><span class="p">(</span><span class="nl">name</span><span class="p">:</span> <span class="n">name</span><span class="p">)</span>    <span class="c1">//子类调用父类方法，实现父类的行为</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>当子类想要实现自己的行为时，可以通过 <code>override</code>关键字 重写 父类方法，如此将会实现子类自己定义的方法行为：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">class</span> <span class="nl">LiveAlbum</span><span class="p">:</span> <span class="n">Album</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">location</span><span class="p">:</span> <span class="n">String</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">init</span><span class="p">(</span><span class="nl">name</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="nl">location</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">location</span> <span class="o">=</span> <span class="n">location</span>
</span><span class='line'>        <span class="nb">super</span><span class="p">.</span><span class="k">init</span><span class="p">(</span><span class="nl">name</span><span class="p">:</span> <span class="n">name</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="kr">override</span> <span class="k">func</span> <span class="n">getPerformance</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&quot;The live album \(name) sold lots&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>总而言之，一个对象可以同时实现自己类的行为和其父类的行为，这称为「多态」。</p>

<h3>Converting types with type casting</h3>

<p>这种情况时有发生：你有一个明确声明的对象，但你知道它其实是另一种类型（比如上面的继承类StudioAlbum 和 LiveAlbum 被当做 Album 保存在数组中，因为它们继承于 Album 所以是允许的），当需要调用方法时，Swift 可能不知道它的真实类型而无法编译，解决办法是 type casting，即类型转换，可以将一个对象的类型转为另一种类型：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">for</span> <span class="n">album</span> <span class="k">in</span> <span class="n">allAlbums</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="n">album</span><span class="p">.</span><span class="n">getPerformance</span><span class="p">())</span>
</span><span class='line'><span class="p">}</span> <span class="c1">//根据上面代码块的内容</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>allAlbums</code> 数组拥有三个类型为 <code>Album</code> 的对象，但是其中两个我们知道是 <code>StudioAlbum</code> 和 <code>LiveAlbum</code>，但是 Swift 却不知道，如果你想执行 <code>print(album.studio)</code> 则无法编译，因为只有 <code>StudioAlbum</code>拥有那个属性。</p>

<p>Type casting 有三种形式，但常见的只有两种：<code>as?</code> 和 <code>as!</code>，分别是可选向下转型以及强制向下转型，前者会返回一个转型后的可选值（optional value），若转型失败会返回nil；当你确定可以转型成功时使用后者，如果转型失败可能导致应用崩溃：
<em>P.S.「转型」并不是指真的改变实例或它的值，而只是告诉 Swift 把这个对象看做某个类的实例。</em></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">for</span> <span class="n">album</span> <span class="k">in</span> <span class="n">allAlbums</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">studioAlbum</span> <span class="o">=</span> <span class="n">album</span> <span class="kt">as</span><span class="o">?</span> <span class="n">StudioAlbum</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>studioAlbum 变量将会拥有一个StudioAlbum？类型数据或是nil，这经常与<code>if let</code>配合使用来自动解包 optional 值：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">for</span> <span class="n">album</span> <span class="k">in</span> <span class="n">allAlbums</span> <span class="p">{</span>
</span><span class='line'>   <span class="n">print</span><span class="p">(</span><span class="n">album</span><span class="p">.</span><span class="n">getPerformance</span><span class="p">())</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">if</span> <span class="k">let</span> <span class="n">studioAlbum</span> <span class="o">=</span> <span class="n">album</span> <span class="kt">as</span><span class="o">?</span> <span class="n">StudioAlbum</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">print</span><span class="p">(</span><span class="n">studioAlbum</span><span class="p">.</span><span class="n">studio</span><span class="p">)</span>
</span><span class='line'>   <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="k">let</span> <span class="n">liveAlbum</span> <span class="o">=</span> <span class="n">album</span> <span class="kt">as</span><span class="o">?</span> <span class="n">LiveAlbum</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">print</span><span class="p">(</span><span class="n">liveAlbum</span><span class="p">.</span><span class="n">location</span><span class="p">)</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>遍历 allAlums 数组内的对象，并判断它们是否为特定子类，如果是，调用子类的方法/属性。</p>

<p>强制向下转型（forced downcasting）就相当于转型并强制拆包，返回的是一个非 optional 值，可以直接使用：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">var</span> <span class="n">taylorSwift</span> <span class="o">=</span> <span class="n">StudioAlbum</span><span class="p">(</span><span class="nl">name</span><span class="p">:</span> <span class="s">&quot;Taylor Swift&quot;</span><span class="p">,</span> <span class="nl">studio</span><span class="p">:</span> <span class="s">&quot;The Castles Studios&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">var</span> <span class="n">fearless</span> <span class="o">=</span> <span class="n">StudioAlbum</span><span class="p">(</span><span class="nl">name</span><span class="p">:</span> <span class="s">&quot;Speak Now&quot;</span><span class="p">,</span> <span class="nl">studio</span><span class="p">:</span> <span class="s">&quot;Aimeeland Studio&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">var</span> <span class="nl">allAlbums</span><span class="p">:</span> <span class="p">[</span><span class="n">Album</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="n">taylorSwift</span><span class="p">,</span> <span class="n">fearless</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="n">album</span> <span class="k">in</span> <span class="n">allAlbums</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">studioAlbum</span> <span class="o">=</span> <span class="n">album</span> <span class="kt">as</span><span class="o">!</span> <span class="n">StudioAlbum</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="n">studioAlbum</span><span class="p">.</span><span class="n">studio</span><span class="p">)</span>
</span><span class='line'>  <span class="c1">//便利数组时如果数组内有 liveAlbum 类的实例就会 crash，因为使用了强制转型</span>
</span><span class='line'>  <span class="c1">//所以为了不 crash，只存放 `StudioAlbum` 实例在数组中</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Swfit 也允许将转型写在数组遍历层，在数组便利初始就将数据转型，如此更有效率：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">for</span> <span class="n">album</span> <span class="k">in</span> <span class="n">allAlbums</span> <span class="kt">as</span><span class="o">!</span> <span class="p">[</span><span class="n">StudioAlbum</span><span class="p">]</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="n">album</span><span class="p">.</span><span class="n">studio</span><span class="p">)</span> <span class="c1">//相当于省去了 let studioAlbum = album as! StudioAlbum</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>但这么用必须得确保数组中所有实例都是 StudioAlbum 类型，否则会crash。</p>

<p>可选向下转型（optional downcasting）也可以这么用，但因为这样做有可能提供给「遍历」一个nil，所以需要用 ??(nil coalescing operator) 来确保提供给 loop 一个值：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">for</span> <span class="n">album</span> <span class="k">in</span> <span class="n">allAlbums</span> <span class="kt">as</span><span class="o">?</span> <span class="p">[</span><span class="n">LiveAlbum</span><span class="p">]</span> <span class="o">??</span> <span class="p">[</span><span class="n">LiveAlbum</span><span class="p">]</span><span class="err">（）</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="n">album</span><span class="p">.</span><span class="n">location</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样相当于：尝试将对象从 <code>allAlbums</code> 转为 <code>LiveAlbum</code> 类型，如果失败，就创建一个空的 <code>LiveAlbum</code> 对象来替代，这相当于啥也没做。这有可能会用得上，不过最好不这么做。</p>

<h2>Closures</h2>

<p>闭包（Closures）相当于 OC 中的 blocks，是包含一段代码的变量，闭包在 Cocoa Touch 中很常见。和方法（function）不同的是，闭包是变量，可以作为参数传递或是作为属性（property）储存。下面看例子：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="n">vw</span> <span class="o">=</span> <span class="bp">UIView</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="bp">UIView</span><span class="p">.</span><span class="n">animateWithDuration</span><span class="p">(</span><span class="mf">0.5</span><span class="p">,</span> <span class="nl">animations</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">vw</span><span class="p">.</span><span class="n">alpha</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>UIView 的 animateWithDuration 方法要求传入一个内含动画内容的闭包，其他的 Cocoa Touch 会帮你实现。之所以要使用闭包作为参数是因为 UIKit 在执行动画前需要做些准备，如此它会拷贝一份闭包内的代码并且在准备完成后执行。
以上示例也显示出在闭包内可以使用其外部的变量，这个特性成为闭包捕获。在闭包外声明了 vw 变量，并在闭包中使用了它。这十分有用，但要注意避免强引用循环（一个对象存储着一个闭包属性，同时这个属性又引用了这个对象）。</p>

<h3>Trailing closures</h3>

<p>这个特性是 Swift 为了更好的可读性增加的一个语法甜头，当方法的最后一个参数是闭包时，为避免闭包内容冗长而导致可读性下降，可以将代码段写在参数括号外，函数会将其自动最为最后一个参数调用：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="bp">UIView</span><span class="p">.</span><span class="n">animateWithDuration</span><span class="p">(</span><span class="mf">0.5</span><span class="err">）</span><span class="p">{</span>
</span><span class='line'>    <span class="n">vw</span><span class="p">.</span><span class="n">alpha</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="p">}</span>  <span class="c1">//如果函数只有闭包一个参数，可以省略掉()</span>
</span></code></pre></td></tr></table></div></figure>


<p>至此 Hacking with Swift 教程的语言基础部分完成了，接下来开始着手 Project 部分，边敲项目边学习。</p>

<p>拓展阅读：<a href="https://www.hackingwithswift.com/new-features-swift-2">The new feature of Swift 2.0 by example</a></p>

<p><em>本文根据自己的理解写下的学习笔记，由于英语和技术水平有限，一定会有不少错误和纰漏，请以原文和官方文档为准，如果能在评论中指出错误则感激不尽。</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[写在开学前]]></title>
    <link href="http://frank1ee.github.io/blog/2015/09/06/xie-zai-kai-xue-qian/"/>
    <updated>2015-09-06T22:03:27+08:00</updated>
    <id>http://frank1ee.github.io/blog/2015/09/06/xie-zai-kai-xue-qian</id>
    <content type="html"><![CDATA[<p>三月底结束专升本考试，为期五个月的「暑假」转瞬即逝，这五个月我都做了什么事情，都有哪些收获，遗憾和不足？以下，简单总结：<!--more--></p>

<h2>关于实习</h2>

<p>考试结束后马不停蹄开始投递简历，却屡屡遭挫。一开始，心仪的公司给出了「该岗位现需有经验的，能掌控全局的工程师」的答复。而后致电数家互联网公司始终得到「没有实习岗位」的答复。最后，我甚至饥不择食地疯投简历，打开招聘网站，只要与 App 开发岗位沾边的能投则投。那些天每日不知打开 Mail app 多少次，终于在我几近绝望时收到了一封来自「美迹」团队的回复，通知面试…</p>

<p> 第一次实习就在一个初创团队真是一段很有意思的经历。四个30多岁的联合创始人，各个掌握「多门技艺」，设计师还能敲代码做网页，工程师能做 iOS 也能做 Android…</p>

<p>实习期间和团队的产品经理聊的比较多，也有不少收获，印象最深的一次是我固执地认为团队即将上线的产品在交互和视觉设计上很多槽点而写了长篇大论发给PM（Product Manager），一开始他没有给出回应，在后来的交谈中他提到了《精益创业（Lean Startup）》这本书，引出了「精益」这个概念，在大量投入产品的开发前需要考虑我们的「愿景」是否真的符合用户的需求？通过最小化可行产品（Minimal viable Product）和实践去得到用户的反馈，从而迭代实现产品功能达到最大化的利用资源。</p>

<p>这次的实习经历让我看着一个产品从 idea 变成现实，自产内容、推广、维护。同时，我也体会到真正的「创业维艰」，核心成员加班乃是家常便饭，产品刚上线那会儿为了推广产品和引导产品内容不遗余力，资金有限也得砸钱。</p>

<p>善用搜索引擎，少说「不会」。记得有一次 PM 让我和公司一运营拟一份产品推广的计划，说实话我对产品的推广一无所知，但还是默不作声地应下了这事。而后，我开始 Google，了解产品推广都有哪些形式和渠道，最后完成了一份还算详实的计划，得到了不错的评价。所以，请善用搜索引擎来弥补你的「无知」，少说「不会」，当然必要的谦逊还是要有的，不懂的东西多问并且提出自己的看法，哪怕你的想法幼稚可笑。</p>

<p>实习后阶段有幸通过「简书」和「微博」认识了一个 iOS开发者，与他的几个创业小伙伴。同在软件园，认识当天就到他们公司坐了一会儿，收获良多，感受到了完全不同的一种创业氛围。</p>

<h2>关于健身</h2>

<p>健身可以说从年初就开始了，在家做一些胸腹的动作，坚持有氧（跳绳，慢跑）。四月份开始走进健身房，从体测情况来看四月至今肌肉有略微增长，体脂从12.2%降至7.7%，增肌情况不太乐观。自打去健身房后我的有氧安排的越来越少，没想到体脂却降这么多，应该是得益于基础代谢高和比较轻淡规律的饮食吧。</p>

<p>健身带给我的绝不仅仅是肌肉，还让我意识到做什么事都是「有学问」的，你必须去不断的学习和探索才能做得更好，一成不变的动作和组数一定不会有很好的效果。你需要和健身房里练得好的人交流，利用网络资源学习，学习尝试新的动作等等。</p>

<p>开学后可能无法做到每天去健身房了，接下来会尝试「囚徒健身」，并且增加无氧，最后感谢<a href="http://weibo.com/u/2352655622?topnav=1&amp;wvr=6&amp;topsug=1">@imzet</a>，可以说是我的健身启蒙。</p>

<h2>关于 iOS 开发</h2>

<p>说起这个我就悲从中来。。专升本考完后就开始看 Big Nerd Ranch 的《Objective-C 教程》以及<a href="http://weibo.com/exceptions?from=myfollow_all">@Mj老师</a>的视频，磕磕绊绊地算是对 C 和 OC 有了一定的了解，接着看了一些诸如《iOS Apprentice》等教程做了一些简单 Demo.前几天刚把 Big Nerd Ranch 出版的《iOS编程（第四版）》看完，算是对 App 的开发有了一个整体的概念，但对于每个知识点学习的「深度」都不够。</p>

<p>很遗憾的是到现在我也没有做出什么像样的东西，学习特别散，没有一个比较系统的方法和流程，效率很低。</p>

<p>接下来打算开始啃 Effective Objective-C。虽然之前一朋友提到现在可以放弃 OC 直接学习大势所趋的 Swift，但是我认为这本书也有助于我对语言框架和 API 等知识有一个更深入的了解。当然，也会同时接触 Swift，先把官方文档看完。</p>

<h2>关于做饭</h2>

<p>这个假期平时在家午餐多是自己一个人解决，所以必须得学会如何填饱自己的肚子。一开始只是做一些简单的面食，而后因为一个契机发奋制作「精致早餐」，又跟着「下厨房」学做了几道菜。在这里推荐一下「下厨房」这个 app，菜谱都产出自用户，简单易懂，容易上手。「下厨房」还招募商家入驻「市集」，缺啥食材或厨具可以直接买买买，很方便。</p>

<h2>关于阅读</h2>

<p>自己的阅读时间越来越少，加上本来阅读速度就慢，这个假期就没看几本书，估计不超过五本。最近在看《精益创业》和《Becoming Steve Jobs》，都看得比较吃力，前者是因为有些创业的概念不太熟悉，后者是因为英语词汇量真是硬伤。师大图书馆的书藏量应该还是很大的，接下去要提高阅读的质和量。</p>

<h2>关于大学</h2>

<p>昨天（9月5日）到达福建师范大学协和学院。说实话对协和学院还是有些失望，可能是因为和师大共享资源的缘故，校内设施和资源不多，篮球架只有6个，连操场都没有&hellip;</p>

<p>从今天开始有为期一周的「入学教育」，各种讲座和大会。</p>

<p>初中-中专-大专-大学，回想自己的「求学路」真是感触良多。希望自己能够更加自律，更加高效，更加「有所求」地度过这剩下的一年半吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World]]></title>
    <link href="http://frank1ee.github.io/blog/2015/09/01/hello-world/"/>
    <updated>2015-09-01T09:03:17+08:00</updated>
    <id>http://frank1ee.github.io/blog/2015/09/01/hello-world</id>
    <content type="html"><![CDATA[<p>Test，博客的第一篇文章。</p>

<p>其实早在几星期前就想搭一个自己的 blog，但因为各种原因迟迟没有完成。先后尝试过 Wordpress，Weebly，但总觉得不是真正的「属于自己的博客」，其实之前也有了解过 Octopress，但是一看官网写明需要 Git 基础就吓得落跑了..<!--more--></p>

<p>昨晚决定把这事儿搞定，Google到了 Octopress + Github pages 搭建免费博客的方法，参考了多位 Bloger 的教程文章，过程中几经坎坷，总算是在当晚搭起了一个简易博客。</p>

<p>至于为什么搭建这个博客，主要还是希望能在一个属于自己的地方总结生活中的方方面面，让知识和思想沉淀。</p>

<p>目前该博客的主要内容大致是：读书笔记，学习笔记，思考总结，文章读后感与分享等等，后期也可能会开始尝试翻译外文。</p>

<p>随着学习的深入，本博客会越来越完善和个性化，也会逐渐丰富内容。</p>

<p>最后，在此感谢所有乐于在网络上分享经验和知识的大神们，以及了不起的开源世界！</p>

<p>搭建本博客所参考的文章链接：</p>

<p><a href="http://octopress.org/docs/setup/">http://octopress.org/docs/setup/</a></p>

<p><a href="http://blog.leichunfeng.com/blog/2014/11/11/use-octopress-plus-github-pages-to-setup-a-personal-blog/">http://blog.leichunfeng.com/blog/2014/11/11/use-octopress-plus-github-pages-to-setup-a-personal-blog/</a></p>

<p><a href="http://msching.github.io/blog/2014/04/11/starting/">http://msching.github.io/blog/2014/04/11/starting/</a></p>

<p><a href="http://shengmingzhiqing.com/blog/octopress-tutorials-toc.html/">http://shengmingzhiqing.com/blog/octopress-tutorials-toc.html/</a></p>
]]></content>
  </entry>
  
</feed>
